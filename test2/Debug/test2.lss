
test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000d90  00000e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800136  00800136  00000e5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f5  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008dc  00000000  00000000  00002481  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000869  00000000  00000000  00002d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  000035c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000567  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ba1  00000000  00000000  00003d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__vector_4>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 41 03 	jmp	0x682	; 0x682 <__vector_11>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	08 00       	.word	0x0008	; ????
  6a:	00 00       	nop
  6c:	be 92       	st	-X, r11
  6e:	24 49       	sbci	r18, 0x94	; 148
  70:	12 3e       	cpi	r17, 0xE2	; 226
  72:	ab aa       	std	Y+51, r10	; 0x33
  74:	aa 2a       	or	r10, r26
  76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
  78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
  7a:	4c 3e       	cpi	r20, 0xEC	; 236
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	be ab       	std	Y+54, r27	; 0x36
  82:	aa aa       	std	Y+50, r10	; 0x32
  84:	aa 3e       	cpi	r26, 0xEA	; 234
  86:	00 00       	nop
  88:	00 00       	nop
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 08       	sbc	r0, r0
  96:	41 78       	andi	r20, 0x81	; 129
  98:	d3 bb       	out	0x13, r29	; 19
  9a:	43 87       	std	Z+11, r20	; 0x0b
  9c:	d1 13       	cpse	r29, r17
  9e:	3d 19       	sub	r19, r13
  a0:	0e 3c       	cpi	r16, 0xCE	; 206
  a2:	c3 bd       	out	0x23, r28	; 35
  a4:	42 82       	std	Z+2, r4	; 0x02
  a6:	ad 2b       	or	r26, r29
  a8:	3e 68       	ori	r19, 0x8E	; 142
  aa:	ec 82       	std	Y+4, r14	; 0x04
  ac:	76 be       	out	0x36, r7	; 54
  ae:	d9 8f       	std	Y+25, r29	; 0x19
  b0:	e1 a9       	ldd	r30, Z+49	; 0x31
  b2:	3e 4c       	sbci	r19, 0xCE	; 206
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	ff be       	out	0x3f, r15	; 63
  b8:	01 c4       	rjmp	.+2050   	; 0x8bc <__addsf3x+0x9c>
  ba:	ff 7f       	andi	r31, 0xFF	; 255
  bc:	3f 00       	.word	0x003f	; ????
  be:	00 00       	nop
	...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	e0 e9       	ldi	r30, 0x90	; 144
  d6:	fd e0       	ldi	r31, 0x0D	; 13
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a6 33       	cpi	r26, 0x36	; 54
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	a6 e3       	ldi	r26, 0x36	; 54
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	ad 33       	cpi	r26, 0x3D	; 61
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <main>
  f8:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <ADC_init>:
uint8_t temperature;
volatile uint16_t thermistor_value;

void ADC_init(void)
{
	ADMUX |= (1<<REFS0); // VCC as voltage reference
 100:	ec e7       	ldi	r30, 0x7C	; 124
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2); //Enables ADC feature, prescaler = 128 --> ADCfreq = 125kHz
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	87 68       	ori	r24, 0x87	; 135
 112:	80 83       	st	Z, r24
 114:	08 95       	ret

00000116 <timer_init>:
}

void timer_init(void)
{
	/*An interrupt happens every 1s*/
	OCR1A = 0x3D08;
 116:	88 e0       	ldi	r24, 0x08	; 8
 118:	9d e3       	ldi	r25, 0x3D	; 61
 11a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 11e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	TCCR1B |= (1 << WGM12);	// Mode 4, CTC on OCR1A
 122:	e1 e8       	ldi	r30, 0x81	; 129
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 60       	ori	r24, 0x08	; 8
 12a:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); 	//Set interrupt on compare match
 12c:	af e6       	ldi	r26, 0x6F	; 111
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	8c 91       	ld	r24, X
 132:	82 60       	ori	r24, 0x02	; 2
 134:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS12) | (1 << CS10); // set prescaler to 1024 and start the timer
 136:	80 81       	ld	r24, Z
 138:	85 60       	ori	r24, 0x05	; 5
 13a:	80 83       	st	Z, r24
 13c:	08 95       	ret

0000013e <button_init>:
}

void button_init(void)
{
	PORTC |= (1<<PORTC2); // Internal pull-up for pause button
 13e:	88 b1       	in	r24, 0x08	; 8
 140:	84 60       	ori	r24, 0x04	; 4
 142:	88 b9       	out	0x08, r24	; 8
	PORTB |= (1<<PORTB2); // Internal pull-up for start button
 144:	85 b1       	in	r24, 0x05	; 5
 146:	84 60       	ori	r24, 0x04	; 4
 148:	85 b9       	out	0x05, r24	; 5
	PCMSK1 |= (1<<PCINT10); // A2 set as input for interrupt
 14a:	ec e6       	ldi	r30, 0x6C	; 108
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	84 60       	ori	r24, 0x04	; 4
 152:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1);  // PCI1 vector,  interrupt 1 enabled
 154:	e8 e6       	ldi	r30, 0x68	; 104
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	80 83       	st	Z, r24
	EICRA |= (1<<ISC11); //falling edge INT1 generates an interrupt request
 15e:	e9 e6       	ldi	r30, 0x69	; 105
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	88 60       	ori	r24, 0x08	; 8
 166:	80 83       	st	Z, r24
	sei();
 168:	78 94       	sei
 16a:	08 95       	ret

0000016c <buzzer_init>:
}

void buzzer_init (void)
{
	TCCR2A = (1<<COM2A0)|(1<<WGM21);    // Toggle OC1B on compare match and CTC mode  with OCR1A top (mode 4)
 16c:	82 e4       	ldi	r24, 0x42	; 66
 16e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);    // 1024x prescaler
 172:	87 e0       	ldi	r24, 0x07	; 7
 174:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A =    13;    // Top value to give 1200hz freq
 178:	8d e0       	ldi	r24, 0x0D	; 13
 17a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 17e:	08 95       	ret

00000180 <LCD_Action>:
	_delay_ms(2);
}

void LCD_Action( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
 180:	9b b1       	in	r25, 0x0b	; 11
 182:	9f 70       	andi	r25, 0x0F	; 15
 184:	28 2f       	mov	r18, r24
 186:	20 7f       	andi	r18, 0xF0	; 240
 188:	92 2b       	or	r25, r18
 18a:	9b b9       	out	0x0b, r25	; 11
	LCD_Port &= ~ (1<<RSPIN);
 18c:	9b b1       	in	r25, 0x0b	; 11
 18e:	9e 7f       	andi	r25, 0xFE	; 254
 190:	9b b9       	out	0x0b, r25	; 11
	LCD_Port |= (1<<ENPIN);
 192:	9b b1       	in	r25, 0x0b	; 11
 194:	92 60       	ori	r25, 0x02	; 2
 196:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	35 e0       	ldi	r19, 0x05	; 5
 19a:	3a 95       	dec	r19
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_Action+0x1a>
 19e:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<ENPIN);
 1a0:	9b b1       	in	r25, 0x0b	; 11
 1a2:	9d 7f       	andi	r25, 0xFD	; 253
 1a4:	9b b9       	out	0x0b, r25	; 11
 1a6:	ef e1       	ldi	r30, 0x1F	; 31
 1a8:	f3 e0       	ldi	r31, 0x03	; 3
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_Action+0x2a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_Action+0x30>
 1b0:	00 00       	nop
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
 1b2:	2b b1       	in	r18, 0x0b	; 11
 1b4:	f0 e1       	ldi	r31, 0x10	; 16
 1b6:	8f 9f       	mul	r24, r31
 1b8:	c0 01       	movw	r24, r0
 1ba:	11 24       	eor	r1, r1
 1bc:	92 2f       	mov	r25, r18
 1be:	9f 70       	andi	r25, 0x0F	; 15
 1c0:	89 2b       	or	r24, r25
 1c2:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1<<ENPIN);
 1c4:	8b b1       	in	r24, 0x0b	; 11
 1c6:	82 60       	ori	r24, 0x02	; 2
 1c8:	8b b9       	out	0x0b, r24	; 11
 1ca:	35 e0       	ldi	r19, 0x05	; 5
 1cc:	3a 95       	dec	r19
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <LCD_Action+0x4c>
 1d0:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<ENPIN);
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	8d 7f       	andi	r24, 0xFD	; 253
 1d6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	8f e3       	ldi	r24, 0x3F	; 63
 1da:	9f e1       	ldi	r25, 0x1F	; 31
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_Action+0x5c>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_Action+0x62>
 1e2:	00 00       	nop
 1e4:	08 95       	ret

000001e6 <LCD_Init>:
	OCR2A =    13;    // Top value to give 1200hz freq
}

void LCD_Init (void)
{
	LCD_DPin = 0xFF;		//Control LCD Pins (D4-D7)
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	8a b9       	out	0x0a, r24	; 10
 1ea:	8f e5       	ldi	r24, 0x5F	; 95
 1ec:	9a ee       	ldi	r25, 0xEA	; 234
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_Init+0x8>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_Init+0xe>
 1f4:	00 00       	nop
	_delay_ms(15);		//Wait before LCD activation
	LCD_Action(0x02);	//4-Bit Control
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Action>
	LCD_Action(0x28);       //Control Matrix @ 4-Bit
 1fe:	88 e2       	ldi	r24, 0x28	; 40
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Action>
	LCD_Action(0x0c);       //Disable Cursor
 206:	8c e0       	ldi	r24, 0x0C	; 12
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Action>
	LCD_Action(0x06);       //Move Cursor
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Action>
	LCD_Action(0x01);       //Clean LCD
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Action>
 21e:	8f e3       	ldi	r24, 0x3F	; 63
 220:	9f e1       	ldi	r25, 0x1F	; 31
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <LCD_Init+0x3c>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_Init+0x42>
 228:	00 00       	nop
 22a:	08 95       	ret

0000022c <LCD_Clear>:
	_delay_ms(2);
}

void LCD_Clear()
{
	LCD_Action (0x01);		//Clear LCD
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Action>
 232:	8f e3       	ldi	r24, 0x3F	; 63
 234:	9f e1       	ldi	r25, 0x1F	; 31
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_Clear+0xa>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_Clear+0x10>
 23c:	00 00       	nop
	_delay_ms(2);			//Wait to clean LCD
	LCD_Action (0x80);		//Move to Position Line 1, Position 1
 23e:	80 e8       	ldi	r24, 0x80	; 128
 240:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Action>
 244:	08 95       	ret

00000246 <LCD_Print>:
}

void LCD_Print (char *str)
{
 246:	fc 01       	movw	r30, r24
	int i;
	for(i=0; str[i]!=0; i++)
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	34 c0       	rjmp	.+104    	; 0x2b6 <LCD_Print+0x70>
	{
		LCD_Port = (LCD_Port & 0x0F) | (str[i] & 0xF0);
 24e:	8b b1       	in	r24, 0x0b	; 11
 250:	8f 70       	andi	r24, 0x0F	; 15
 252:	90 7f       	andi	r25, 0xF0	; 240
 254:	98 2b       	or	r25, r24
 256:	9b b9       	out	0x0b, r25	; 11
		LCD_Port |= (1<<RSPIN);
 258:	8b b1       	in	r24, 0x0b	; 11
 25a:	81 60       	ori	r24, 0x01	; 1
 25c:	8b b9       	out	0x0b, r24	; 11
		LCD_Port|= (1<<ENPIN);
 25e:	8b b1       	in	r24, 0x0b	; 11
 260:	82 60       	ori	r24, 0x02	; 2
 262:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	85 e0       	ldi	r24, 0x05	; 5
 266:	8a 95       	dec	r24
 268:	f1 f7       	brne	.-4      	; 0x266 <LCD_Print+0x20>
 26a:	00 00       	nop
		_delay_us(1);
		LCD_Port &= ~ (1<<ENPIN);
 26c:	8b b1       	in	r24, 0x0b	; 11
 26e:	8d 7f       	andi	r24, 0xFD	; 253
 270:	8b b9       	out	0x0b, r24	; 11
 272:	8f e1       	ldi	r24, 0x1F	; 31
 274:	93 e0       	ldi	r25, 0x03	; 3
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_Print+0x30>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_Print+0x36>
 27c:	00 00       	nop
		_delay_us(200);
		LCD_Port = (LCD_Port & 0x0F) | (str[i] << 4);
 27e:	4b b1       	in	r20, 0x0b	; 11
 280:	9c 91       	ld	r25, X
 282:	80 e1       	ldi	r24, 0x10	; 16
 284:	98 9f       	mul	r25, r24
 286:	90 01       	movw	r18, r0
 288:	11 24       	eor	r1, r1
 28a:	94 2f       	mov	r25, r20
 28c:	9f 70       	andi	r25, 0x0F	; 15
 28e:	29 2b       	or	r18, r25
 290:	2b b9       	out	0x0b, r18	; 11
		LCD_Port |= (1<<ENPIN);
 292:	9b b1       	in	r25, 0x0b	; 11
 294:	92 60       	ori	r25, 0x02	; 2
 296:	9b b9       	out	0x0b, r25	; 11
 298:	95 e0       	ldi	r25, 0x05	; 5
 29a:	9a 95       	dec	r25
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_Print+0x54>
 29e:	00 00       	nop
		_delay_us(1);
		LCD_Port &= ~ (1<<ENPIN);
 2a0:	9b b1       	in	r25, 0x0b	; 11
 2a2:	9d 7f       	andi	r25, 0xFD	; 253
 2a4:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a6:	8f e3       	ldi	r24, 0x3F	; 63
 2a8:	9f e1       	ldi	r25, 0x1F	; 31
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCD_Print+0x64>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCD_Print+0x6a>
 2b0:	00 00       	nop
}

void LCD_Print (char *str)
{
	int i;
	for(i=0; str[i]!=0; i++)
 2b2:	6f 5f       	subi	r22, 0xFF	; 255
 2b4:	7f 4f       	sbci	r23, 0xFF	; 255
 2b6:	df 01       	movw	r26, r30
 2b8:	a6 0f       	add	r26, r22
 2ba:	b7 1f       	adc	r27, r23
 2bc:	9c 91       	ld	r25, X
 2be:	91 11       	cpse	r25, r1
 2c0:	c6 cf       	rjmp	.-116    	; 0x24e <LCD_Print+0x8>
		LCD_Port |= (1<<ENPIN);
		_delay_us(1);
		LCD_Port &= ~ (1<<ENPIN);
		_delay_ms(2);
	}
}
 2c2:	08 95       	ret

000002c4 <LCD_Printpos>:

void LCD_Printpos (char row, char pos, char *str)
{ //Write on a specific location
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
 2ca:	81 11       	cpse	r24, r1
 2cc:	08 c0       	rjmp	.+16     	; 0x2de <LCD_Printpos+0x1a>
 2ce:	60 31       	cpi	r22, 0x10	; 16
 2d0:	30 f4       	brcc	.+12     	; 0x2de <LCD_Printpos+0x1a>
	LCD_Action((pos & 0x0F)|0x80);
 2d2:	86 2f       	mov	r24, r22
 2d4:	8f 70       	andi	r24, 0x0F	; 15
 2d6:	80 68       	ori	r24, 0x80	; 128
 2d8:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Action>
 2dc:	09 c0       	rjmp	.+18     	; 0x2f0 <LCD_Printpos+0x2c>
	else if (row == 1 && pos<16)
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	39 f4       	brne	.+14     	; 0x2f0 <LCD_Printpos+0x2c>
 2e2:	60 31       	cpi	r22, 0x10	; 16
 2e4:	28 f4       	brcc	.+10     	; 0x2f0 <LCD_Printpos+0x2c>
	LCD_Action((pos & 0x0F)|0xC0);
 2e6:	86 2f       	mov	r24, r22
 2e8:	8f 70       	andi	r24, 0x0F	; 15
 2ea:	80 6c       	ori	r24, 0xC0	; 192
 2ec:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Action>
	LCD_Print(str);
 2f0:	ce 01       	movw	r24, r28
 2f2:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Print>
}
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <read_ADC>:

uint16_t read_ADC(uint8_t ADCchannel)
{
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F); //select ADC channel with safety mask
 2fc:	ec e7       	ldi	r30, 0x7C	; 124
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	90 81       	ld	r25, Z
 302:	90 7f       	andi	r25, 0xF0	; 240
 304:	8f 70       	andi	r24, 0x0F	; 15
 306:	89 2b       	or	r24, r25
 308:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //single conversion mode
 30a:	ea e7       	ldi	r30, 0x7A	; 122
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	80 64       	ori	r24, 0x40	; 64
 312:	80 83       	st	Z, r24

	while( ADCSRA & (1<<ADSC) ); // wait until ADC conversion is complete
 314:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 318:	86 fd       	sbrc	r24, 6
 31a:	fc cf       	rjmp	.-8      	; 0x314 <read_ADC+0x18>
	return ADC;
 31c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 320:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 324:	08 95       	ret

00000326 <ADC_to_seconds>:

uint8_t ADC_to_seconds(uint16_t adc_number)
{
	/*Returns the timer value in seconds*/
	const float MAX_SECONDS = 180;
	float decimal_result = ((float)adc_number/1023)*MAX_SECONDS;
 326:	bc 01       	movw	r22, r24
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 06 05 	call	0xa0c	; 0xa0c <__floatunsisf>
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 ec       	ldi	r19, 0xC0	; 192
 334:	4f e7       	ldi	r20, 0x7F	; 127
 336:	54 e4       	ldi	r21, 0x44	; 68
 338:	0e 94 65 04 	call	0x8ca	; 0x8ca <__divsf3>
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	44 e3       	ldi	r20, 0x34	; 52
 342:	53 e4       	ldi	r21, 0x43	; 67
 344:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__mulsf3>
	return (uint8_t)decimal_result;
 348:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__fixunssfsi>
 34c:	86 2f       	mov	r24, r22
}
 34e:	08 95       	ret

00000350 <ADC_to_celcius>:

uint8_t ADC_to_celcius(uint16_t adc_number)
{
 350:	8f 92       	push	r8
 352:	9f 92       	push	r9
 354:	af 92       	push	r10
 356:	bf 92       	push	r11
 358:	cf 92       	push	r12
 35a:	df 92       	push	r13
 35c:	ef 92       	push	r14
 35e:	ff 92       	push	r15
	const float R_25 = 10000; // ref. resistance thermistor
	const float BETA = 3950; // material constant
	const float ADC_MAX = 1023;
	const float VCC = 5.0;
	
	float V_0 = ((float)adc_number*VCC) / ADC_MAX; // voltage over thermistor
 360:	bc 01       	movw	r22, r24
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 06 05 	call	0xa0c	; 0xa0c <__floatunsisf>
 36a:	20 e0       	ldi	r18, 0x00	; 0
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	40 ea       	ldi	r20, 0xA0	; 160
 370:	50 e4       	ldi	r21, 0x40	; 64
 372:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__mulsf3>
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	30 ec       	ldi	r19, 0xC0	; 192
 37a:	4f e7       	ldi	r20, 0x7F	; 127
 37c:	54 e4       	ldi	r21, 0x44	; 68
 37e:	0e 94 65 04 	call	0x8ca	; 0x8ca <__divsf3>
 382:	6b 01       	movw	r12, r22
 384:	7c 01       	movw	r14, r24
	float R_0 = V_0*R_25 / (VCC-V_0); // thermistor resistance
 386:	20 e0       	ldi	r18, 0x00	; 0
 388:	30 e4       	ldi	r19, 0x40	; 64
 38a:	4c e1       	ldi	r20, 0x1C	; 28
 38c:	56 e4       	ldi	r21, 0x46	; 70
 38e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__mulsf3>
 392:	4b 01       	movw	r8, r22
 394:	5c 01       	movw	r10, r24
 396:	a7 01       	movw	r20, r14
 398:	96 01       	movw	r18, r12
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	80 ea       	ldi	r24, 0xA0	; 160
 3a0:	90 e4       	ldi	r25, 0x40	; 64
 3a2:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__subsf3>
 3a6:	9b 01       	movw	r18, r22
 3a8:	ac 01       	movw	r20, r24
 3aa:	c5 01       	movw	r24, r10
 3ac:	b4 01       	movw	r22, r8
 3ae:	0e 94 65 04 	call	0x8ca	; 0x8ca <__divsf3>
	float celcius = (1 / ((1/T_25) + (1/BETA)*log(R_0 / R_25))) - 273.15;
 3b2:	20 e0       	ldi	r18, 0x00	; 0
 3b4:	30 e4       	ldi	r19, 0x40	; 64
 3b6:	4c e1       	ldi	r20, 0x1C	; 28
 3b8:	56 e4       	ldi	r21, 0x46	; 70
 3ba:	0e 94 65 04 	call	0x8ca	; 0x8ca <__divsf3>
 3be:	0e 94 9c 05 	call	0xb38	; 0xb38 <log>
 3c2:	2c e2       	ldi	r18, 0x2C	; 44
 3c4:	3b eb       	ldi	r19, 0xBB	; 187
 3c6:	44 e8       	ldi	r20, 0x84	; 132
 3c8:	59 e3       	ldi	r21, 0x39	; 57
 3ca:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__mulsf3>
 3ce:	2f e0       	ldi	r18, 0x0F	; 15
 3d0:	3f ec       	ldi	r19, 0xCF	; 207
 3d2:	4b e5       	ldi	r20, 0x5B	; 91
 3d4:	5b e3       	ldi	r21, 0x3B	; 59
 3d6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__addsf3>
 3da:	9b 01       	movw	r18, r22
 3dc:	ac 01       	movw	r20, r24
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	80 e8       	ldi	r24, 0x80	; 128
 3e4:	9f e3       	ldi	r25, 0x3F	; 63
 3e6:	0e 94 65 04 	call	0x8ca	; 0x8ca <__divsf3>
 3ea:	23 e3       	ldi	r18, 0x33	; 51
 3ec:	33 e9       	ldi	r19, 0x93	; 147
 3ee:	48 e8       	ldi	r20, 0x88	; 136
 3f0:	53 e4       	ldi	r21, 0x43	; 67
 3f2:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__subsf3>
	return (uint8_t)celcius;
 3f6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__fixunssfsi>
 3fa:	86 2f       	mov	r24, r22
}
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	df 90       	pop	r13
 402:	cf 90       	pop	r12
 404:	bf 90       	pop	r11
 406:	af 90       	pop	r10
 408:	9f 90       	pop	r9
 40a:	8f 90       	pop	r8
 40c:	08 95       	ret

0000040e <buzzer>:

void buzzer()
{
	for (int i = 3; i > 0; --i)
 40e:	83 e0       	ldi	r24, 0x03	; 3
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	16 c0       	rjmp	.+44     	; 0x440 <buzzer+0x32>
	{
		DDRB = (1<<DDB3);  // PB3 or OCR2A output pin
 414:	28 e0       	ldi	r18, 0x08	; 8
 416:	24 b9       	out	0x04, r18	; 4
 418:	2f ef       	ldi	r18, 0xFF	; 255
 41a:	33 ed       	ldi	r19, 0xD3	; 211
 41c:	40 e3       	ldi	r20, 0x30	; 48
 41e:	21 50       	subi	r18, 0x01	; 1
 420:	30 40       	sbci	r19, 0x00	; 0
 422:	40 40       	sbci	r20, 0x00	; 0
 424:	e1 f7       	brne	.-8      	; 0x41e <buzzer+0x10>
 426:	00 c0       	rjmp	.+0      	; 0x428 <buzzer+0x1a>
 428:	00 00       	nop
		_delay_ms(1000);
		DDRB = (0<<DDB3);
 42a:	14 b8       	out	0x04, r1	; 4
 42c:	2f ef       	ldi	r18, 0xFF	; 255
 42e:	39 e6       	ldi	r19, 0x69	; 105
 430:	48 e1       	ldi	r20, 0x18	; 24
 432:	21 50       	subi	r18, 0x01	; 1
 434:	30 40       	sbci	r19, 0x00	; 0
 436:	40 40       	sbci	r20, 0x00	; 0
 438:	e1 f7       	brne	.-8      	; 0x432 <buzzer+0x24>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <buzzer+0x2e>
 43c:	00 00       	nop
	return (uint8_t)celcius;
}

void buzzer()
{
	for (int i = 3; i > 0; --i)
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	18 16       	cp	r1, r24
 442:	19 06       	cpc	r1, r25
 444:	3c f3       	brlt	.-50     	; 0x414 <buzzer+0x6>
		DDRB = (1<<DDB3);  // PB3 or OCR2A output pin
		_delay_ms(1000);
		DDRB = (0<<DDB3);
		_delay_ms(500);
	}
}
 446:	08 95       	ret

00000448 <debounce>:

uint8_t debounce(uint8_t button_pin) {
	if (bit_is_clear(PINB, button_pin)) {      /* button is pressed now */
 448:	23 b1       	in	r18, 0x03	; 3
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	08 2e       	mov	r0, r24
 44e:	02 c0       	rjmp	.+4      	; 0x454 <debounce+0xc>
 450:	35 95       	asr	r19
 452:	27 95       	ror	r18
 454:	0a 94       	dec	r0
 456:	e2 f7       	brpl	.-8      	; 0x450 <debounce+0x8>
 458:	20 fd       	sbrc	r18, 0
 45a:	12 c0       	rjmp	.+36     	; 0x480 <debounce+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 45c:	ef e9       	ldi	r30, 0x9F	; 159
 45e:	ff e0       	ldi	r31, 0x0F	; 15
 460:	31 97       	sbiw	r30, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <debounce+0x18>
 464:	00 c0       	rjmp	.+0      	; 0x466 <debounce+0x1e>
 466:	00 00       	nop
		_delay_us(DEBOUNCE_TIME);
		if (bit_is_clear(PINB, button_pin)) {            /* still pressed */
 468:	23 b1       	in	r18, 0x03	; 3
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	a9 01       	movw	r20, r18
 46e:	02 c0       	rjmp	.+4      	; 0x474 <debounce+0x2c>
 470:	55 95       	asr	r21
 472:	47 95       	ror	r20
 474:	8a 95       	dec	r24
 476:	e2 f7       	brpl	.-8      	; 0x470 <debounce+0x28>
 478:	40 fd       	sbrc	r20, 0
 47a:	04 c0       	rjmp	.+8      	; 0x484 <debounce+0x3c>
			return 1;
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	08 95       	ret
		}
	}
	return 0;
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	08 95       	ret
 484:	80 e0       	ldi	r24, 0x00	; 0
}
 486:	08 95       	ret

00000488 <get_button_status>:
uint8_t get_button_status(uint8_t button)
{
	if (debounce(button)) {                        /* debounced button press */
 488:	0e 94 24 02 	call	0x448	; 0x448 <debounce>
 48c:	88 23       	and	r24, r24
 48e:	41 f0       	breq	.+16     	; 0x4a0 <get_button_status+0x18>
		if (buttonWasPressed == 0) {     /* but wasn't last time through */
 490:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <buttonWasPressed>
 494:	81 11       	cpse	r24, r1
 496:	07 c0       	rjmp	.+14     	; 0x4a6 <get_button_status+0x1e>
			buttonWasPressed = 1;                      /* update the state */
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <buttonWasPressed>
			return 1;
 49e:	08 95       	ret
		}
	}
	else {                                /* button is not pressed now */
		buttonWasPressed = 0;                        /* update the state */
 4a0:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <buttonWasPressed>
		return 0;
 4a4:	08 95       	ret
	}
}
 4a6:	08 95       	ret

000004a8 <yellow_LED_on>:

void yellow_LED_on(){
	R_Y_LED_PORT |= (1<<YELLOW_LED);
 4a8:	8b b1       	in	r24, 0x0b	; 11
 4aa:	88 60       	ori	r24, 0x08	; 8
 4ac:	8b b9       	out	0x0b, r24	; 11
	R_Y_LED_PORT &= ~(1<<RED_LED);
 4ae:	8b b1       	in	r24, 0x0b	; 11
 4b0:	8b 7f       	andi	r24, 0xFB	; 251
 4b2:	8b b9       	out	0x0b, r24	; 11
	G_LED_PORT &= ~(1<<GREEN_LED);
 4b4:	85 b1       	in	r24, 0x05	; 5
 4b6:	8e 7f       	andi	r24, 0xFE	; 254
 4b8:	85 b9       	out	0x05, r24	; 5
 4ba:	08 95       	ret

000004bc <green_LED_on>:
}

void green_LED_on(){
	G_LED_PORT |= (1<<GREEN_LED);
 4bc:	85 b1       	in	r24, 0x05	; 5
 4be:	81 60       	ori	r24, 0x01	; 1
 4c0:	85 b9       	out	0x05, r24	; 5
	R_Y_LED_PORT &= ~(1<<RED_LED);
 4c2:	8b b1       	in	r24, 0x0b	; 11
 4c4:	8b 7f       	andi	r24, 0xFB	; 251
 4c6:	8b b9       	out	0x0b, r24	; 11
	R_Y_LED_PORT &= ~(1<<YELLOW_LED);
 4c8:	8b b1       	in	r24, 0x0b	; 11
 4ca:	87 7f       	andi	r24, 0xF7	; 247
 4cc:	8b b9       	out	0x0b, r24	; 11
 4ce:	08 95       	ret

000004d0 <red_LED_on>:
}

void red_LED_on(){
	R_Y_LED_PORT |= (1<<RED_LED);
 4d0:	8b b1       	in	r24, 0x0b	; 11
 4d2:	84 60       	ori	r24, 0x04	; 4
 4d4:	8b b9       	out	0x0b, r24	; 11
	R_Y_LED_PORT &= ~(1<<YELLOW_LED);
 4d6:	8b b1       	in	r24, 0x0b	; 11
 4d8:	87 7f       	andi	r24, 0xF7	; 247
 4da:	8b b9       	out	0x0b, r24	; 11
	G_LED_PORT &= ~(1<<GREEN_LED);
 4dc:	85 b1       	in	r24, 0x05	; 5
 4de:	8e 7f       	andi	r24, 0xFE	; 254
 4e0:	85 b9       	out	0x05, r24	; 5
 4e2:	08 95       	ret

000004e4 <main>:
}


int main()
{	//initializing first
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	cd b7       	in	r28, 0x3d	; 61
 4ea:	de b7       	in	r29, 0x3e	; 62
 4ec:	62 97       	sbiw	r28, 0x12	; 18
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	f8 94       	cli
 4f2:	de bf       	out	0x3e, r29	; 62
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	cd bf       	out	0x3d, r28	; 61
	ADC_init();
 4f8:	0e 94 80 00 	call	0x100	; 0x100 <ADC_init>
	timer_init();
 4fc:	0e 94 8b 00 	call	0x116	; 0x116 <timer_init>
	button_init();
 500:	0e 94 9f 00 	call	0x13e	; 0x13e <button_init>
	LCD_Init(); //Activate LCD
 504:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_Init>
	buzzer_init();
 508:	0e 94 b6 00 	call	0x16c	; 0x16c <buzzer_init>
	DDRB |= (1<<GREEN_LED);
 50c:	84 b1       	in	r24, 0x04	; 4
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	84 b9       	out	0x04, r24	; 4
	
	/*Start sequence. Shows "set potmeter" on LCD and has a countdown with the three leds*/
	
	LCD_Print("Set potmeter");	//Begin writing at Line 1, Position 1
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51a:	2f ef       	ldi	r18, 0xFF	; 255
 51c:	8d e3       	ldi	r24, 0x3D	; 61
 51e:	99 e4       	ldi	r25, 0x49	; 73
 520:	21 50       	subi	r18, 0x01	; 1
 522:	80 40       	sbci	r24, 0x00	; 0
 524:	90 40       	sbci	r25, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <main+0x3c>
 528:	00 c0       	rjmp	.+0      	; 0x52a <main+0x46>
 52a:	00 00       	nop
	_delay_ms(1500);
	
	green_LED_on();
 52c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <green_LED_on>
 530:	2f ef       	ldi	r18, 0xFF	; 255
 532:	83 ed       	ldi	r24, 0xD3	; 211
 534:	90 e3       	ldi	r25, 0x30	; 48
 536:	21 50       	subi	r18, 0x01	; 1
 538:	80 40       	sbci	r24, 0x00	; 0
 53a:	90 40       	sbci	r25, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <main+0x52>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <main+0x5c>
 540:	00 00       	nop
	_delay_ms(1000);
	yellow_LED_on();
 542:	0e 94 54 02 	call	0x4a8	; 0x4a8 <yellow_LED_on>
 546:	2f ef       	ldi	r18, 0xFF	; 255
 548:	83 ed       	ldi	r24, 0xD3	; 211
 54a:	90 e3       	ldi	r25, 0x30	; 48
 54c:	21 50       	subi	r18, 0x01	; 1
 54e:	80 40       	sbci	r24, 0x00	; 0
 550:	90 40       	sbci	r25, 0x00	; 0
 552:	e1 f7       	brne	.-8      	; 0x54c <main+0x68>
 554:	00 c0       	rjmp	.+0      	; 0x556 <main+0x72>
 556:	00 00       	nop
	_delay_ms(1000);
	red_LED_on();
 558:	0e 94 68 02 	call	0x4d0	; 0x4d0 <red_LED_on>
 55c:	2f ef       	ldi	r18, 0xFF	; 255
 55e:	83 ed       	ldi	r24, 0xD3	; 211
 560:	90 e3       	ldi	r25, 0x30	; 48
 562:	21 50       	subi	r18, 0x01	; 1
 564:	80 40       	sbci	r24, 0x00	; 0
 566:	90 40       	sbci	r25, 0x00	; 0
 568:	e1 f7       	brne	.-8      	; 0x562 <main+0x7e>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <main+0x88>
 56c:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear();
 56e:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Clear>
 572:	65 c0       	rjmp	.+202    	; 0x63e <main+0x15a>

	while(1) 
	{
		while (timer_running == 0 && start_pressed == 0)
		{
			cli(); // Disable interrupts
 574:	f8 94       	cli
			
			/* starts ADC_convertion of potmeter and tempsensor */
			volatile uint16_t pot_value = read_ADC(POT_PIN);
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	0e 94 7e 01 	call	0x2fc	; 0x2fc <read_ADC>
 57c:	9a 8b       	std	Y+18, r25	; 0x12
 57e:	89 8b       	std	Y+17, r24	; 0x11
			seconds = ADC_to_seconds(pot_value);
 580:	89 89       	ldd	r24, Y+17	; 0x11
 582:	9a 89       	ldd	r25, Y+18	; 0x12
 584:	0e 94 93 01 	call	0x326	; 0x326 <ADC_to_seconds>
 588:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <seconds>
			
			thermistor_value = read_ADC(THERM_PIN);
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <read_ADC>
 592:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <thermistor_value+0x1>
 596:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <thermistor_value>
			temperature = ADC_to_celcius(thermistor_value);
 59a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <thermistor_value>
 59e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <thermistor_value+0x1>
 5a2:	0e 94 a8 01 	call	0x350	; 0x350 <ADC_to_celcius>
 5a6:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <temperature>
 5aa:	2f ef       	ldi	r18, 0xFF	; 255
 5ac:	83 ec       	ldi	r24, 0xC3	; 195
 5ae:	99 e0       	ldi	r25, 0x09	; 9
 5b0:	21 50       	subi	r18, 0x01	; 1
 5b2:	80 40       	sbci	r24, 0x00	; 0
 5b4:	90 40       	sbci	r25, 0x00	; 0
 5b6:	e1 f7       	brne	.-8      	; 0x5b0 <main+0xcc>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <main+0xd6>
 5ba:	00 00       	nop
			
			_delay_ms(200);
			
			/* Print secons ans temperature*/
			char sec [8]; //makes the seconds into char
			itoa(seconds, sec, 10); //makes it possible to print on the LCD
 5bc:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <seconds>
 5c0:	4a e0       	ldi	r20, 0x0A	; 10
 5c2:	50 e0       	ldi	r21, 0x00	; 0
 5c4:	be 01       	movw	r22, r28
 5c6:	67 5f       	subi	r22, 0xF7	; 247
 5c8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 86 06 	call	0xd0c	; 0xd0c <itoa>
			LCD_Action(0x80); //sets the cursor on the LCD to row 1, place 1
 5d0:	80 e8       	ldi	r24, 0x80	; 128
 5d2:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Action>
			LCD_Print(sec); //print seconds
 5d6:	ce 01       	movw	r24, r28
 5d8:	09 96       	adiw	r24, 0x09	; 9
 5da:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Print>
 5de:	2f ef       	ldi	r18, 0xFF	; 255
 5e0:	83 ec       	ldi	r24, 0xC3	; 195
 5e2:	99 e0       	ldi	r25, 0x09	; 9
 5e4:	21 50       	subi	r18, 0x01	; 1
 5e6:	80 40       	sbci	r24, 0x00	; 0
 5e8:	90 40       	sbci	r25, 0x00	; 0
 5ea:	e1 f7       	brne	.-8      	; 0x5e4 <main+0x100>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <main+0x10a>
 5ee:	00 00       	nop
			_delay_ms(200);
			LCD_Clear(); //clears LCD
 5f0:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Clear>
			
			char temp [8]; //makes temperature into char
			itoa(temperature, temp, 10); //makes it possible to print on LCD
 5f4:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <temperature>
 5f8:	4a e0       	ldi	r20, 0x0A	; 10
 5fa:	50 e0       	ldi	r21, 0x00	; 0
 5fc:	be 01       	movw	r22, r28
 5fe:	6f 5f       	subi	r22, 0xFF	; 255
 600:	7f 4f       	sbci	r23, 0xFF	; 255
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 86 06 	call	0xd0c	; 0xd0c <itoa>
			LCD_Action(0xC0);	//sets cursor on LCD to row 2, position 1 
 608:	80 ec       	ldi	r24, 0xC0	; 192
 60a:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Action>
			LCD_Print("Temperature:"); //prints the "temperature" on the position set by action 
 60e:	8d e0       	ldi	r24, 0x0D	; 13
 610:	91 e0       	ldi	r25, 0x01	; 1
 612:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Print>
			LCD_Printpos(2 , 14, temp); //prints the temperature on position 2, 14. 
 616:	ae 01       	movw	r20, r28
 618:	4f 5f       	subi	r20, 0xFF	; 255
 61a:	5f 4f       	sbci	r21, 0xFF	; 255
 61c:	6e e0       	ldi	r22, 0x0E	; 14
 61e:	82 e0       	ldi	r24, 0x02	; 2
 620:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_Printpos>
			
			start_pressed = get_button_status(START_PIN);
 624:	82 e0       	ldi	r24, 0x02	; 2
 626:	0e 94 44 02 	call	0x488	; 0x488 <get_button_status>
 62a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
// 			
			if (start_pressed)
 62e:	88 23       	and	r24, r24
 630:	31 f0       	breq	.+12     	; 0x63e <main+0x15a>
			{
				timer_running = 1;
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <timer_running>
				green_LED_on();
 638:	0e 94 5e 02 	call	0x4bc	; 0x4bc <green_LED_on>
				sei();	// enable interrupts, also starts the countdown
 63c:	78 94       	sei
	_delay_ms(1000);
	LCD_Clear();

	while(1) 
	{
		while (timer_running == 0 && start_pressed == 0)
 63e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <timer_running>
 642:	81 11       	cpse	r24, r1
 644:	05 c0       	rjmp	.+10     	; 0x650 <main+0x16c>
 646:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 64a:	88 23       	and	r24, r24
 64c:	09 f4       	brne	.+2      	; 0x650 <main+0x16c>
 64e:	92 cf       	rjmp	.-220    	; 0x574 <main+0x90>
				green_LED_on();
				sei();	// enable interrupts, also starts the countdown
			}
		} //end while
		/* Reads the termistor value and converts it to temperature*/
		thermistor_value = read_ADC(THERM_PIN);
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	0e 94 7e 01 	call	0x2fc	; 0x2fc <read_ADC>
 656:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <thermistor_value+0x1>
 65a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <thermistor_value>
		temperature = ADC_to_celcius(thermistor_value);
 65e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <thermistor_value>
 662:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <thermistor_value+0x1>
 666:	0e 94 a8 01 	call	0x350	; 0x350 <ADC_to_celcius>
 66a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <temperature>
 66e:	2f ef       	ldi	r18, 0xFF	; 255
 670:	89 e6       	ldi	r24, 0x69	; 105
 672:	98 e1       	ldi	r25, 0x18	; 24
 674:	21 50       	subi	r18, 0x01	; 1
 676:	80 40       	sbci	r24, 0x00	; 0
 678:	90 40       	sbci	r25, 0x00	; 0
 67a:	e1 f7       	brne	.-8      	; 0x674 <main+0x190>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <main+0x19a>
 67e:	00 00       	nop
 680:	de cf       	rjmp	.-68     	; 0x63e <main+0x15a>

00000682 <__vector_11>:
		
	} //end while(1)
} //end int main

ISR (TIMER1_COMPA_vect) // action to be done every 1 sec
{
 682:	1f 92       	push	r1
 684:	0f 92       	push	r0
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	0f 92       	push	r0
 68a:	11 24       	eor	r1, r1
 68c:	2f 93       	push	r18
 68e:	3f 93       	push	r19
 690:	4f 93       	push	r20
 692:	5f 93       	push	r21
 694:	6f 93       	push	r22
 696:	7f 93       	push	r23
 698:	8f 93       	push	r24
 69a:	9f 93       	push	r25
 69c:	af 93       	push	r26
 69e:	bf 93       	push	r27
 6a0:	ef 93       	push	r30
 6a2:	ff 93       	push	r31
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	cd b7       	in	r28, 0x3d	; 61
 6aa:	de b7       	in	r29, 0x3e	; 62
 6ac:	60 97       	sbiw	r28, 0x10	; 16
 6ae:	de bf       	out	0x3e, r29	; 62
 6b0:	cd bf       	out	0x3d, r28	; 61
	seconds--; // Subtracts 1 from the timer value
 6b2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <seconds>
 6b6:	81 50       	subi	r24, 0x01	; 1
 6b8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <seconds>
	if (seconds == 0) //finished sequence
 6bc:	81 11       	cpse	r24, r1
 6be:	1a c0       	rjmp	.+52     	; 0x6f4 <__vector_11+0x72>
	{	LCD_Clear();
 6c0:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Clear>
		red_LED_on();
 6c4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <red_LED_on>
		LCD_Print("Finished");
 6c8:	8a e1       	ldi	r24, 0x1A	; 26
 6ca:	91 e0       	ldi	r25, 0x01	; 1
 6cc:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Print>
		buzzer();
 6d0:	0e 94 07 02 	call	0x40e	; 0x40e <buzzer>
 6d4:	2f ef       	ldi	r18, 0xFF	; 255
 6d6:	8b e7       	ldi	r24, 0x7B	; 123
 6d8:	92 e9       	ldi	r25, 0x92	; 146
 6da:	21 50       	subi	r18, 0x01	; 1
 6dc:	80 40       	sbci	r24, 0x00	; 0
 6de:	90 40       	sbci	r25, 0x00	; 0
 6e0:	e1 f7       	brne	.-8      	; 0x6da <__vector_11+0x58>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <__vector_11+0x62>
 6e4:	00 00       	nop
		_delay_ms(3000);
		LCD_Clear();
 6e6:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Clear>
		timer_running = 0;
 6ea:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <timer_running>
		start_pressed = 0;
 6ee:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
 6f2:	34 c0       	rjmp	.+104    	; 0x75c <__vector_11+0xda>
		
	}
	else
	{   /* When the timer counts down ,the LCD prints the countdown of seconds and the temperature */
		LCD_Clear();
 6f4:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Clear>
		char sec [8];
		itoa(seconds, sec, 10);
 6f8:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <seconds>
 6fc:	4a e0       	ldi	r20, 0x0A	; 10
 6fe:	50 e0       	ldi	r21, 0x00	; 0
 700:	be 01       	movw	r22, r28
 702:	67 5f       	subi	r22, 0xF7	; 247
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 86 06 	call	0xd0c	; 0xd0c <itoa>
//		LCD_Print("Time left");
		LCD_Action(0x80); //sets the cursor to 1, 1
 70c:	80 e8       	ldi	r24, 0x80	; 128
 70e:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Action>
		LCD_Print(sec); //prints seconds
 712:	ce 01       	movw	r24, r28
 714:	09 96       	adiw	r24, 0x09	; 9
 716:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Print>
 71a:	2f ef       	ldi	r18, 0xFF	; 255
 71c:	81 ee       	ldi	r24, 0xE1	; 225
 71e:	94 e0       	ldi	r25, 0x04	; 4
 720:	21 50       	subi	r18, 0x01	; 1
 722:	80 40       	sbci	r24, 0x00	; 0
 724:	90 40       	sbci	r25, 0x00	; 0
 726:	e1 f7       	brne	.-8      	; 0x720 <__vector_11+0x9e>
 728:	00 c0       	rjmp	.+0      	; 0x72a <__vector_11+0xa8>
 72a:	00 00       	nop
		_delay_ms(100);
		
		char temp [8];
		itoa(temperature, temp, 10);
 72c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <temperature>
 730:	4a e0       	ldi	r20, 0x0A	; 10
 732:	50 e0       	ldi	r21, 0x00	; 0
 734:	be 01       	movw	r22, r28
 736:	6f 5f       	subi	r22, 0xFF	; 255
 738:	7f 4f       	sbci	r23, 0xFF	; 255
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 86 06 	call	0xd0c	; 0xd0c <itoa>
		LCD_Action(0xC0);	//sets the cursor on the LCD to 2, 1 
 740:	80 ec       	ldi	r24, 0xC0	; 192
 742:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Action>
		LCD_Print("Temperatur:");
 746:	83 e2       	ldi	r24, 0x23	; 35
 748:	91 e0       	ldi	r25, 0x01	; 1
 74a:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Print>
		LCD_Printpos(2 , 14, temp); //printstemperature on position 2, 14
 74e:	ae 01       	movw	r20, r28
 750:	4f 5f       	subi	r20, 0xFF	; 255
 752:	5f 4f       	sbci	r21, 0xFF	; 255
 754:	6e e0       	ldi	r22, 0x0E	; 14
 756:	82 e0       	ldi	r24, 0x02	; 2
 758:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_Printpos>
		
	}
}
 75c:	60 96       	adiw	r28, 0x10	; 16
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	f8 94       	cli
 762:	de bf       	out	0x3e, r29	; 62
 764:	0f be       	out	0x3f, r0	; 63
 766:	cd bf       	out	0x3d, r28	; 61
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	ff 91       	pop	r31
 76e:	ef 91       	pop	r30
 770:	bf 91       	pop	r27
 772:	af 91       	pop	r26
 774:	9f 91       	pop	r25
 776:	8f 91       	pop	r24
 778:	7f 91       	pop	r23
 77a:	6f 91       	pop	r22
 77c:	5f 91       	pop	r21
 77e:	4f 91       	pop	r20
 780:	3f 91       	pop	r19
 782:	2f 91       	pop	r18
 784:	0f 90       	pop	r0
 786:	0f be       	out	0x3f, r0	; 63
 788:	0f 90       	pop	r0
 78a:	1f 90       	pop	r1
 78c:	18 95       	reti

0000078e <__vector_4>:


ISR (PCINT1_vect)
{	/* Pause sequence with interrupt. prints "pause"*/
 78e:	1f 92       	push	r1
 790:	0f 92       	push	r0
 792:	0f b6       	in	r0, 0x3f	; 63
 794:	0f 92       	push	r0
 796:	11 24       	eor	r1, r1
 798:	2f 93       	push	r18
 79a:	3f 93       	push	r19
 79c:	4f 93       	push	r20
 79e:	5f 93       	push	r21
 7a0:	6f 93       	push	r22
 7a2:	7f 93       	push	r23
 7a4:	8f 93       	push	r24
 7a6:	9f 93       	push	r25
 7a8:	af 93       	push	r26
 7aa:	bf 93       	push	r27
 7ac:	ef 93       	push	r30
 7ae:	ff 93       	push	r31
	yellow_LED_on();
 7b0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <yellow_LED_on>
	LCD_Clear();
 7b4:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Clear>
	LCD_Print("Pause!");
 7b8:	8f e2       	ldi	r24, 0x2F	; 47
 7ba:	91 e0       	ldi	r25, 0x01	; 1
 7bc:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Print>
	while(get_button_status(START_PIN) == 0) {} // wait for start button to be pressed
 7c0:	82 e0       	ldi	r24, 0x02	; 2
 7c2:	0e 94 44 02 	call	0x488	; 0x488 <get_button_status>
 7c6:	88 23       	and	r24, r24
 7c8:	d9 f3       	breq	.-10     	; 0x7c0 <__vector_4+0x32>
	green_LED_on();
 7ca:	0e 94 5e 02 	call	0x4bc	; 0x4bc <green_LED_on>
 7ce:	ff 91       	pop	r31
 7d0:	ef 91       	pop	r30
 7d2:	bf 91       	pop	r27
 7d4:	af 91       	pop	r26
 7d6:	9f 91       	pop	r25
 7d8:	8f 91       	pop	r24
 7da:	7f 91       	pop	r23
 7dc:	6f 91       	pop	r22
 7de:	5f 91       	pop	r21
 7e0:	4f 91       	pop	r20
 7e2:	3f 91       	pop	r19
 7e4:	2f 91       	pop	r18
 7e6:	0f 90       	pop	r0
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	0f 90       	pop	r0
 7ec:	1f 90       	pop	r1
 7ee:	18 95       	reti

000007f0 <__subsf3>:
 7f0:	50 58       	subi	r21, 0x80	; 128

000007f2 <__addsf3>:
 7f2:	bb 27       	eor	r27, r27
 7f4:	aa 27       	eor	r26, r26
 7f6:	0e 94 10 04 	call	0x820	; 0x820 <__addsf3x>
 7fa:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_round>
 7fe:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_pscA>
 802:	38 f0       	brcs	.+14     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 804:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fp_pscB>
 808:	20 f0       	brcs	.+8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80a:	39 f4       	brne	.+14     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 80c:	9f 3f       	cpi	r25, 0xFF	; 255
 80e:	19 f4       	brne	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 810:	26 f4       	brtc	.+8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 812:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_nan>
 816:	0e f4       	brtc	.+2      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 818:	e0 95       	com	r30
 81a:	e7 fb       	bst	r30, 7
 81c:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>

00000820 <__addsf3x>:
 820:	e9 2f       	mov	r30, r25
 822:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_split3>
 826:	58 f3       	brcs	.-42     	; 0x7fe <__addsf3+0xc>
 828:	ba 17       	cp	r27, r26
 82a:	62 07       	cpc	r22, r18
 82c:	73 07       	cpc	r23, r19
 82e:	84 07       	cpc	r24, r20
 830:	95 07       	cpc	r25, r21
 832:	20 f0       	brcs	.+8      	; 0x83c <__addsf3x+0x1c>
 834:	79 f4       	brne	.+30     	; 0x854 <__addsf3x+0x34>
 836:	a6 f5       	brtc	.+104    	; 0x8a0 <__addsf3x+0x80>
 838:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__fp_zero>
 83c:	0e f4       	brtc	.+2      	; 0x840 <__addsf3x+0x20>
 83e:	e0 95       	com	r30
 840:	0b 2e       	mov	r0, r27
 842:	ba 2f       	mov	r27, r26
 844:	a0 2d       	mov	r26, r0
 846:	0b 01       	movw	r0, r22
 848:	b9 01       	movw	r22, r18
 84a:	90 01       	movw	r18, r0
 84c:	0c 01       	movw	r0, r24
 84e:	ca 01       	movw	r24, r20
 850:	a0 01       	movw	r20, r0
 852:	11 24       	eor	r1, r1
 854:	ff 27       	eor	r31, r31
 856:	59 1b       	sub	r21, r25
 858:	99 f0       	breq	.+38     	; 0x880 <__addsf3x+0x60>
 85a:	59 3f       	cpi	r21, 0xF9	; 249
 85c:	50 f4       	brcc	.+20     	; 0x872 <__addsf3x+0x52>
 85e:	50 3e       	cpi	r21, 0xE0	; 224
 860:	68 f1       	brcs	.+90     	; 0x8bc <__addsf3x+0x9c>
 862:	1a 16       	cp	r1, r26
 864:	f0 40       	sbci	r31, 0x00	; 0
 866:	a2 2f       	mov	r26, r18
 868:	23 2f       	mov	r18, r19
 86a:	34 2f       	mov	r19, r20
 86c:	44 27       	eor	r20, r20
 86e:	58 5f       	subi	r21, 0xF8	; 248
 870:	f3 cf       	rjmp	.-26     	; 0x858 <__addsf3x+0x38>
 872:	46 95       	lsr	r20
 874:	37 95       	ror	r19
 876:	27 95       	ror	r18
 878:	a7 95       	ror	r26
 87a:	f0 40       	sbci	r31, 0x00	; 0
 87c:	53 95       	inc	r21
 87e:	c9 f7       	brne	.-14     	; 0x872 <__addsf3x+0x52>
 880:	7e f4       	brtc	.+30     	; 0x8a0 <__addsf3x+0x80>
 882:	1f 16       	cp	r1, r31
 884:	ba 0b       	sbc	r27, r26
 886:	62 0b       	sbc	r22, r18
 888:	73 0b       	sbc	r23, r19
 88a:	84 0b       	sbc	r24, r20
 88c:	ba f0       	brmi	.+46     	; 0x8bc <__addsf3x+0x9c>
 88e:	91 50       	subi	r25, 0x01	; 1
 890:	a1 f0       	breq	.+40     	; 0x8ba <__addsf3x+0x9a>
 892:	ff 0f       	add	r31, r31
 894:	bb 1f       	adc	r27, r27
 896:	66 1f       	adc	r22, r22
 898:	77 1f       	adc	r23, r23
 89a:	88 1f       	adc	r24, r24
 89c:	c2 f7       	brpl	.-16     	; 0x88e <__addsf3x+0x6e>
 89e:	0e c0       	rjmp	.+28     	; 0x8bc <__addsf3x+0x9c>
 8a0:	ba 0f       	add	r27, r26
 8a2:	62 1f       	adc	r22, r18
 8a4:	73 1f       	adc	r23, r19
 8a6:	84 1f       	adc	r24, r20
 8a8:	48 f4       	brcc	.+18     	; 0x8bc <__addsf3x+0x9c>
 8aa:	87 95       	ror	r24
 8ac:	77 95       	ror	r23
 8ae:	67 95       	ror	r22
 8b0:	b7 95       	ror	r27
 8b2:	f7 95       	ror	r31
 8b4:	9e 3f       	cpi	r25, 0xFE	; 254
 8b6:	08 f0       	brcs	.+2      	; 0x8ba <__addsf3x+0x9a>
 8b8:	b0 cf       	rjmp	.-160    	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 8ba:	93 95       	inc	r25
 8bc:	88 0f       	add	r24, r24
 8be:	08 f0       	brcs	.+2      	; 0x8c2 <__addsf3x+0xa2>
 8c0:	99 27       	eor	r25, r25
 8c2:	ee 0f       	add	r30, r30
 8c4:	97 95       	ror	r25
 8c6:	87 95       	ror	r24
 8c8:	08 95       	ret

000008ca <__divsf3>:
 8ca:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__divsf3x>
 8ce:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_round>
 8d2:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fp_pscB>
 8d6:	58 f0       	brcs	.+22     	; 0x8ee <__divsf3+0x24>
 8d8:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_pscA>
 8dc:	40 f0       	brcs	.+16     	; 0x8ee <__divsf3+0x24>
 8de:	29 f4       	brne	.+10     	; 0x8ea <__divsf3+0x20>
 8e0:	5f 3f       	cpi	r21, 0xFF	; 255
 8e2:	29 f0       	breq	.+10     	; 0x8ee <__divsf3+0x24>
 8e4:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>
 8e8:	51 11       	cpse	r21, r1
 8ea:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>
 8ee:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_nan>

000008f2 <__divsf3x>:
 8f2:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_split3>
 8f6:	68 f3       	brcs	.-38     	; 0x8d2 <__divsf3+0x8>

000008f8 <__divsf3_pse>:
 8f8:	99 23       	and	r25, r25
 8fa:	b1 f3       	breq	.-20     	; 0x8e8 <__divsf3+0x1e>
 8fc:	55 23       	and	r21, r21
 8fe:	91 f3       	breq	.-28     	; 0x8e4 <__divsf3+0x1a>
 900:	95 1b       	sub	r25, r21
 902:	55 0b       	sbc	r21, r21
 904:	bb 27       	eor	r27, r27
 906:	aa 27       	eor	r26, r26
 908:	62 17       	cp	r22, r18
 90a:	73 07       	cpc	r23, r19
 90c:	84 07       	cpc	r24, r20
 90e:	38 f0       	brcs	.+14     	; 0x91e <__stack+0x1f>
 910:	9f 5f       	subi	r25, 0xFF	; 255
 912:	5f 4f       	sbci	r21, 0xFF	; 255
 914:	22 0f       	add	r18, r18
 916:	33 1f       	adc	r19, r19
 918:	44 1f       	adc	r20, r20
 91a:	aa 1f       	adc	r26, r26
 91c:	a9 f3       	breq	.-22     	; 0x908 <__stack+0x9>
 91e:	35 d0       	rcall	.+106    	; 0x98a <__stack+0x8b>
 920:	0e 2e       	mov	r0, r30
 922:	3a f0       	brmi	.+14     	; 0x932 <__stack+0x33>
 924:	e0 e8       	ldi	r30, 0x80	; 128
 926:	32 d0       	rcall	.+100    	; 0x98c <__stack+0x8d>
 928:	91 50       	subi	r25, 0x01	; 1
 92a:	50 40       	sbci	r21, 0x00	; 0
 92c:	e6 95       	lsr	r30
 92e:	00 1c       	adc	r0, r0
 930:	ca f7       	brpl	.-14     	; 0x924 <__stack+0x25>
 932:	2b d0       	rcall	.+86     	; 0x98a <__stack+0x8b>
 934:	fe 2f       	mov	r31, r30
 936:	29 d0       	rcall	.+82     	; 0x98a <__stack+0x8b>
 938:	66 0f       	add	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	bb 1f       	adc	r27, r27
 940:	26 17       	cp	r18, r22
 942:	37 07       	cpc	r19, r23
 944:	48 07       	cpc	r20, r24
 946:	ab 07       	cpc	r26, r27
 948:	b0 e8       	ldi	r27, 0x80	; 128
 94a:	09 f0       	breq	.+2      	; 0x94e <__stack+0x4f>
 94c:	bb 0b       	sbc	r27, r27
 94e:	80 2d       	mov	r24, r0
 950:	bf 01       	movw	r22, r30
 952:	ff 27       	eor	r31, r31
 954:	93 58       	subi	r25, 0x83	; 131
 956:	5f 4f       	sbci	r21, 0xFF	; 255
 958:	3a f0       	brmi	.+14     	; 0x968 <__stack+0x69>
 95a:	9e 3f       	cpi	r25, 0xFE	; 254
 95c:	51 05       	cpc	r21, r1
 95e:	78 f0       	brcs	.+30     	; 0x97e <__stack+0x7f>
 960:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>
 964:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>
 968:	5f 3f       	cpi	r21, 0xFF	; 255
 96a:	e4 f3       	brlt	.-8      	; 0x964 <__stack+0x65>
 96c:	98 3e       	cpi	r25, 0xE8	; 232
 96e:	d4 f3       	brlt	.-12     	; 0x964 <__stack+0x65>
 970:	86 95       	lsr	r24
 972:	77 95       	ror	r23
 974:	67 95       	ror	r22
 976:	b7 95       	ror	r27
 978:	f7 95       	ror	r31
 97a:	9f 5f       	subi	r25, 0xFF	; 255
 97c:	c9 f7       	brne	.-14     	; 0x970 <__stack+0x71>
 97e:	88 0f       	add	r24, r24
 980:	91 1d       	adc	r25, r1
 982:	96 95       	lsr	r25
 984:	87 95       	ror	r24
 986:	97 f9       	bld	r25, 7
 988:	08 95       	ret
 98a:	e1 e0       	ldi	r30, 0x01	; 1
 98c:	66 0f       	add	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	bb 1f       	adc	r27, r27
 994:	62 17       	cp	r22, r18
 996:	73 07       	cpc	r23, r19
 998:	84 07       	cpc	r24, r20
 99a:	ba 07       	cpc	r27, r26
 99c:	20 f0       	brcs	.+8      	; 0x9a6 <__stack+0xa7>
 99e:	62 1b       	sub	r22, r18
 9a0:	73 0b       	sbc	r23, r19
 9a2:	84 0b       	sbc	r24, r20
 9a4:	ba 0b       	sbc	r27, r26
 9a6:	ee 1f       	adc	r30, r30
 9a8:	88 f7       	brcc	.-30     	; 0x98c <__stack+0x8d>
 9aa:	e0 95       	com	r30
 9ac:	08 95       	ret

000009ae <__fixunssfsi>:
 9ae:	0e 94 73 05 	call	0xae6	; 0xae6 <__fp_splitA>
 9b2:	88 f0       	brcs	.+34     	; 0x9d6 <__fixunssfsi+0x28>
 9b4:	9f 57       	subi	r25, 0x7F	; 127
 9b6:	98 f0       	brcs	.+38     	; 0x9de <__fixunssfsi+0x30>
 9b8:	b9 2f       	mov	r27, r25
 9ba:	99 27       	eor	r25, r25
 9bc:	b7 51       	subi	r27, 0x17	; 23
 9be:	b0 f0       	brcs	.+44     	; 0x9ec <__fixunssfsi+0x3e>
 9c0:	e1 f0       	breq	.+56     	; 0x9fa <__fixunssfsi+0x4c>
 9c2:	66 0f       	add	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	1a f0       	brmi	.+6      	; 0x9d2 <__fixunssfsi+0x24>
 9cc:	ba 95       	dec	r27
 9ce:	c9 f7       	brne	.-14     	; 0x9c2 <__fixunssfsi+0x14>
 9d0:	14 c0       	rjmp	.+40     	; 0x9fa <__fixunssfsi+0x4c>
 9d2:	b1 30       	cpi	r27, 0x01	; 1
 9d4:	91 f0       	breq	.+36     	; 0x9fa <__fixunssfsi+0x4c>
 9d6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fp_zero>
 9da:	b1 e0       	ldi	r27, 0x01	; 1
 9dc:	08 95       	ret
 9de:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__fp_zero>
 9e2:	67 2f       	mov	r22, r23
 9e4:	78 2f       	mov	r23, r24
 9e6:	88 27       	eor	r24, r24
 9e8:	b8 5f       	subi	r27, 0xF8	; 248
 9ea:	39 f0       	breq	.+14     	; 0x9fa <__fixunssfsi+0x4c>
 9ec:	b9 3f       	cpi	r27, 0xF9	; 249
 9ee:	cc f3       	brlt	.-14     	; 0x9e2 <__fixunssfsi+0x34>
 9f0:	86 95       	lsr	r24
 9f2:	77 95       	ror	r23
 9f4:	67 95       	ror	r22
 9f6:	b3 95       	inc	r27
 9f8:	d9 f7       	brne	.-10     	; 0x9f0 <__fixunssfsi+0x42>
 9fa:	3e f4       	brtc	.+14     	; 0xa0a <__fixunssfsi+0x5c>
 9fc:	90 95       	com	r25
 9fe:	80 95       	com	r24
 a00:	70 95       	com	r23
 a02:	61 95       	neg	r22
 a04:	7f 4f       	sbci	r23, 0xFF	; 255
 a06:	8f 4f       	sbci	r24, 0xFF	; 255
 a08:	9f 4f       	sbci	r25, 0xFF	; 255
 a0a:	08 95       	ret

00000a0c <__floatunsisf>:
 a0c:	e8 94       	clt
 a0e:	09 c0       	rjmp	.+18     	; 0xa22 <__floatsisf+0x12>

00000a10 <__floatsisf>:
 a10:	97 fb       	bst	r25, 7
 a12:	3e f4       	brtc	.+14     	; 0xa22 <__floatsisf+0x12>
 a14:	90 95       	com	r25
 a16:	80 95       	com	r24
 a18:	70 95       	com	r23
 a1a:	61 95       	neg	r22
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	99 23       	and	r25, r25
 a24:	a9 f0       	breq	.+42     	; 0xa50 <__floatsisf+0x40>
 a26:	f9 2f       	mov	r31, r25
 a28:	96 e9       	ldi	r25, 0x96	; 150
 a2a:	bb 27       	eor	r27, r27
 a2c:	93 95       	inc	r25
 a2e:	f6 95       	lsr	r31
 a30:	87 95       	ror	r24
 a32:	77 95       	ror	r23
 a34:	67 95       	ror	r22
 a36:	b7 95       	ror	r27
 a38:	f1 11       	cpse	r31, r1
 a3a:	f8 cf       	rjmp	.-16     	; 0xa2c <__floatsisf+0x1c>
 a3c:	fa f4       	brpl	.+62     	; 0xa7c <__floatsisf+0x6c>
 a3e:	bb 0f       	add	r27, r27
 a40:	11 f4       	brne	.+4      	; 0xa46 <__floatsisf+0x36>
 a42:	60 ff       	sbrs	r22, 0
 a44:	1b c0       	rjmp	.+54     	; 0xa7c <__floatsisf+0x6c>
 a46:	6f 5f       	subi	r22, 0xFF	; 255
 a48:	7f 4f       	sbci	r23, 0xFF	; 255
 a4a:	8f 4f       	sbci	r24, 0xFF	; 255
 a4c:	9f 4f       	sbci	r25, 0xFF	; 255
 a4e:	16 c0       	rjmp	.+44     	; 0xa7c <__floatsisf+0x6c>
 a50:	88 23       	and	r24, r24
 a52:	11 f0       	breq	.+4      	; 0xa58 <__floatsisf+0x48>
 a54:	96 e9       	ldi	r25, 0x96	; 150
 a56:	11 c0       	rjmp	.+34     	; 0xa7a <__floatsisf+0x6a>
 a58:	77 23       	and	r23, r23
 a5a:	21 f0       	breq	.+8      	; 0xa64 <__floatsisf+0x54>
 a5c:	9e e8       	ldi	r25, 0x8E	; 142
 a5e:	87 2f       	mov	r24, r23
 a60:	76 2f       	mov	r23, r22
 a62:	05 c0       	rjmp	.+10     	; 0xa6e <__floatsisf+0x5e>
 a64:	66 23       	and	r22, r22
 a66:	71 f0       	breq	.+28     	; 0xa84 <__floatsisf+0x74>
 a68:	96 e8       	ldi	r25, 0x86	; 134
 a6a:	86 2f       	mov	r24, r22
 a6c:	70 e0       	ldi	r23, 0x00	; 0
 a6e:	60 e0       	ldi	r22, 0x00	; 0
 a70:	2a f0       	brmi	.+10     	; 0xa7c <__floatsisf+0x6c>
 a72:	9a 95       	dec	r25
 a74:	66 0f       	add	r22, r22
 a76:	77 1f       	adc	r23, r23
 a78:	88 1f       	adc	r24, r24
 a7a:	da f7       	brpl	.-10     	; 0xa72 <__floatsisf+0x62>
 a7c:	88 0f       	add	r24, r24
 a7e:	96 95       	lsr	r25
 a80:	87 95       	ror	r24
 a82:	97 f9       	bld	r25, 7
 a84:	08 95       	ret

00000a86 <__fp_inf>:
 a86:	97 f9       	bld	r25, 7
 a88:	9f 67       	ori	r25, 0x7F	; 127
 a8a:	80 e8       	ldi	r24, 0x80	; 128
 a8c:	70 e0       	ldi	r23, 0x00	; 0
 a8e:	60 e0       	ldi	r22, 0x00	; 0
 a90:	08 95       	ret

00000a92 <__fp_nan>:
 a92:	9f ef       	ldi	r25, 0xFF	; 255
 a94:	80 ec       	ldi	r24, 0xC0	; 192
 a96:	08 95       	ret

00000a98 <__fp_pscA>:
 a98:	00 24       	eor	r0, r0
 a9a:	0a 94       	dec	r0
 a9c:	16 16       	cp	r1, r22
 a9e:	17 06       	cpc	r1, r23
 aa0:	18 06       	cpc	r1, r24
 aa2:	09 06       	cpc	r0, r25
 aa4:	08 95       	ret

00000aa6 <__fp_pscB>:
 aa6:	00 24       	eor	r0, r0
 aa8:	0a 94       	dec	r0
 aaa:	12 16       	cp	r1, r18
 aac:	13 06       	cpc	r1, r19
 aae:	14 06       	cpc	r1, r20
 ab0:	05 06       	cpc	r0, r21
 ab2:	08 95       	ret

00000ab4 <__fp_round>:
 ab4:	09 2e       	mov	r0, r25
 ab6:	03 94       	inc	r0
 ab8:	00 0c       	add	r0, r0
 aba:	11 f4       	brne	.+4      	; 0xac0 <__fp_round+0xc>
 abc:	88 23       	and	r24, r24
 abe:	52 f0       	brmi	.+20     	; 0xad4 <__fp_round+0x20>
 ac0:	bb 0f       	add	r27, r27
 ac2:	40 f4       	brcc	.+16     	; 0xad4 <__fp_round+0x20>
 ac4:	bf 2b       	or	r27, r31
 ac6:	11 f4       	brne	.+4      	; 0xacc <__fp_round+0x18>
 ac8:	60 ff       	sbrs	r22, 0
 aca:	04 c0       	rjmp	.+8      	; 0xad4 <__fp_round+0x20>
 acc:	6f 5f       	subi	r22, 0xFF	; 255
 ace:	7f 4f       	sbci	r23, 0xFF	; 255
 ad0:	8f 4f       	sbci	r24, 0xFF	; 255
 ad2:	9f 4f       	sbci	r25, 0xFF	; 255
 ad4:	08 95       	ret

00000ad6 <__fp_split3>:
 ad6:	57 fd       	sbrc	r21, 7
 ad8:	90 58       	subi	r25, 0x80	; 128
 ada:	44 0f       	add	r20, r20
 adc:	55 1f       	adc	r21, r21
 ade:	59 f0       	breq	.+22     	; 0xaf6 <__fp_splitA+0x10>
 ae0:	5f 3f       	cpi	r21, 0xFF	; 255
 ae2:	71 f0       	breq	.+28     	; 0xb00 <__fp_splitA+0x1a>
 ae4:	47 95       	ror	r20

00000ae6 <__fp_splitA>:
 ae6:	88 0f       	add	r24, r24
 ae8:	97 fb       	bst	r25, 7
 aea:	99 1f       	adc	r25, r25
 aec:	61 f0       	breq	.+24     	; 0xb06 <__fp_splitA+0x20>
 aee:	9f 3f       	cpi	r25, 0xFF	; 255
 af0:	79 f0       	breq	.+30     	; 0xb10 <__fp_splitA+0x2a>
 af2:	87 95       	ror	r24
 af4:	08 95       	ret
 af6:	12 16       	cp	r1, r18
 af8:	13 06       	cpc	r1, r19
 afa:	14 06       	cpc	r1, r20
 afc:	55 1f       	adc	r21, r21
 afe:	f2 cf       	rjmp	.-28     	; 0xae4 <__fp_split3+0xe>
 b00:	46 95       	lsr	r20
 b02:	f1 df       	rcall	.-30     	; 0xae6 <__fp_splitA>
 b04:	08 c0       	rjmp	.+16     	; 0xb16 <__fp_splitA+0x30>
 b06:	16 16       	cp	r1, r22
 b08:	17 06       	cpc	r1, r23
 b0a:	18 06       	cpc	r1, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	f1 cf       	rjmp	.-30     	; 0xaf2 <__fp_splitA+0xc>
 b10:	86 95       	lsr	r24
 b12:	71 05       	cpc	r23, r1
 b14:	61 05       	cpc	r22, r1
 b16:	08 94       	sec
 b18:	08 95       	ret

00000b1a <__fp_zero>:
 b1a:	e8 94       	clt

00000b1c <__fp_szero>:
 b1c:	bb 27       	eor	r27, r27
 b1e:	66 27       	eor	r22, r22
 b20:	77 27       	eor	r23, r23
 b22:	cb 01       	movw	r24, r22
 b24:	97 f9       	bld	r25, 7
 b26:	08 95       	ret
 b28:	16 f0       	brts	.+4      	; 0xb2e <__fp_szero+0x12>
 b2a:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__fp_mpack>
 b2e:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_nan>
 b32:	68 94       	set
 b34:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>

00000b38 <log>:
 b38:	0e 94 73 05 	call	0xae6	; 0xae6 <__fp_splitA>
 b3c:	a8 f3       	brcs	.-22     	; 0xb28 <__fp_szero+0xc>
 b3e:	99 23       	and	r25, r25
 b40:	c1 f3       	breq	.-16     	; 0xb32 <__fp_szero+0x16>
 b42:	ae f3       	brts	.-22     	; 0xb2e <__fp_szero+0x12>
 b44:	df 93       	push	r29
 b46:	cf 93       	push	r28
 b48:	1f 93       	push	r17
 b4a:	0f 93       	push	r16
 b4c:	ff 92       	push	r15
 b4e:	c9 2f       	mov	r28, r25
 b50:	dd 27       	eor	r29, r29
 b52:	88 23       	and	r24, r24
 b54:	2a f0       	brmi	.+10     	; 0xb60 <log+0x28>
 b56:	21 97       	sbiw	r28, 0x01	; 1
 b58:	66 0f       	add	r22, r22
 b5a:	77 1f       	adc	r23, r23
 b5c:	88 1f       	adc	r24, r24
 b5e:	da f7       	brpl	.-10     	; 0xb56 <log+0x1e>
 b60:	20 e0       	ldi	r18, 0x00	; 0
 b62:	30 e0       	ldi	r19, 0x00	; 0
 b64:	40 e8       	ldi	r20, 0x80	; 128
 b66:	5f eb       	ldi	r21, 0xBF	; 191
 b68:	9f e3       	ldi	r25, 0x3F	; 63
 b6a:	88 39       	cpi	r24, 0x98	; 152
 b6c:	20 f0       	brcs	.+8      	; 0xb76 <log+0x3e>
 b6e:	80 3e       	cpi	r24, 0xE0	; 224
 b70:	38 f0       	brcs	.+14     	; 0xb80 <log+0x48>
 b72:	21 96       	adiw	r28, 0x01	; 1
 b74:	8f 77       	andi	r24, 0x7F	; 127
 b76:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__addsf3>
 b7a:	e8 e6       	ldi	r30, 0x68	; 104
 b7c:	f0 e0       	ldi	r31, 0x00	; 0
 b7e:	04 c0       	rjmp	.+8      	; 0xb88 <log+0x50>
 b80:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__addsf3>
 b84:	e5 e9       	ldi	r30, 0x95	; 149
 b86:	f0 e0       	ldi	r31, 0x00	; 0
 b88:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__fp_powser>
 b8c:	8b 01       	movw	r16, r22
 b8e:	be 01       	movw	r22, r28
 b90:	ec 01       	movw	r28, r24
 b92:	fb 2e       	mov	r15, r27
 b94:	6f 57       	subi	r22, 0x7F	; 127
 b96:	71 09       	sbc	r23, r1
 b98:	75 95       	asr	r23
 b9a:	77 1f       	adc	r23, r23
 b9c:	88 0b       	sbc	r24, r24
 b9e:	99 0b       	sbc	r25, r25
 ba0:	0e 94 08 05 	call	0xa10	; 0xa10 <__floatsisf>
 ba4:	28 e1       	ldi	r18, 0x18	; 24
 ba6:	32 e7       	ldi	r19, 0x72	; 114
 ba8:	41 e3       	ldi	r20, 0x31	; 49
 baa:	5f e3       	ldi	r21, 0x3F	; 63
 bac:	0e 94 f7 05 	call	0xbee	; 0xbee <__mulsf3x>
 bb0:	af 2d       	mov	r26, r15
 bb2:	98 01       	movw	r18, r16
 bb4:	ae 01       	movw	r20, r28
 bb6:	ff 90       	pop	r15
 bb8:	0f 91       	pop	r16
 bba:	1f 91       	pop	r17
 bbc:	cf 91       	pop	r28
 bbe:	df 91       	pop	r29
 bc0:	0e 94 10 04 	call	0x820	; 0x820 <__addsf3x>
 bc4:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_round>

00000bc8 <__mulsf3>:
 bc8:	0e 94 f7 05 	call	0xbee	; 0xbee <__mulsf3x>
 bcc:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_round>
 bd0:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_pscA>
 bd4:	38 f0       	brcs	.+14     	; 0xbe4 <__mulsf3+0x1c>
 bd6:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fp_pscB>
 bda:	20 f0       	brcs	.+8      	; 0xbe4 <__mulsf3+0x1c>
 bdc:	95 23       	and	r25, r21
 bde:	11 f0       	breq	.+4      	; 0xbe4 <__mulsf3+0x1c>
 be0:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>
 be4:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_nan>
 be8:	11 24       	eor	r1, r1
 bea:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>

00000bee <__mulsf3x>:
 bee:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_split3>
 bf2:	70 f3       	brcs	.-36     	; 0xbd0 <__mulsf3+0x8>

00000bf4 <__mulsf3_pse>:
 bf4:	95 9f       	mul	r25, r21
 bf6:	c1 f3       	breq	.-16     	; 0xbe8 <__mulsf3+0x20>
 bf8:	95 0f       	add	r25, r21
 bfa:	50 e0       	ldi	r21, 0x00	; 0
 bfc:	55 1f       	adc	r21, r21
 bfe:	62 9f       	mul	r22, r18
 c00:	f0 01       	movw	r30, r0
 c02:	72 9f       	mul	r23, r18
 c04:	bb 27       	eor	r27, r27
 c06:	f0 0d       	add	r31, r0
 c08:	b1 1d       	adc	r27, r1
 c0a:	63 9f       	mul	r22, r19
 c0c:	aa 27       	eor	r26, r26
 c0e:	f0 0d       	add	r31, r0
 c10:	b1 1d       	adc	r27, r1
 c12:	aa 1f       	adc	r26, r26
 c14:	64 9f       	mul	r22, r20
 c16:	66 27       	eor	r22, r22
 c18:	b0 0d       	add	r27, r0
 c1a:	a1 1d       	adc	r26, r1
 c1c:	66 1f       	adc	r22, r22
 c1e:	82 9f       	mul	r24, r18
 c20:	22 27       	eor	r18, r18
 c22:	b0 0d       	add	r27, r0
 c24:	a1 1d       	adc	r26, r1
 c26:	62 1f       	adc	r22, r18
 c28:	73 9f       	mul	r23, r19
 c2a:	b0 0d       	add	r27, r0
 c2c:	a1 1d       	adc	r26, r1
 c2e:	62 1f       	adc	r22, r18
 c30:	83 9f       	mul	r24, r19
 c32:	a0 0d       	add	r26, r0
 c34:	61 1d       	adc	r22, r1
 c36:	22 1f       	adc	r18, r18
 c38:	74 9f       	mul	r23, r20
 c3a:	33 27       	eor	r19, r19
 c3c:	a0 0d       	add	r26, r0
 c3e:	61 1d       	adc	r22, r1
 c40:	23 1f       	adc	r18, r19
 c42:	84 9f       	mul	r24, r20
 c44:	60 0d       	add	r22, r0
 c46:	21 1d       	adc	r18, r1
 c48:	82 2f       	mov	r24, r18
 c4a:	76 2f       	mov	r23, r22
 c4c:	6a 2f       	mov	r22, r26
 c4e:	11 24       	eor	r1, r1
 c50:	9f 57       	subi	r25, 0x7F	; 127
 c52:	50 40       	sbci	r21, 0x00	; 0
 c54:	9a f0       	brmi	.+38     	; 0xc7c <__mulsf3_pse+0x88>
 c56:	f1 f0       	breq	.+60     	; 0xc94 <__mulsf3_pse+0xa0>
 c58:	88 23       	and	r24, r24
 c5a:	4a f0       	brmi	.+18     	; 0xc6e <__mulsf3_pse+0x7a>
 c5c:	ee 0f       	add	r30, r30
 c5e:	ff 1f       	adc	r31, r31
 c60:	bb 1f       	adc	r27, r27
 c62:	66 1f       	adc	r22, r22
 c64:	77 1f       	adc	r23, r23
 c66:	88 1f       	adc	r24, r24
 c68:	91 50       	subi	r25, 0x01	; 1
 c6a:	50 40       	sbci	r21, 0x00	; 0
 c6c:	a9 f7       	brne	.-22     	; 0xc58 <__mulsf3_pse+0x64>
 c6e:	9e 3f       	cpi	r25, 0xFE	; 254
 c70:	51 05       	cpc	r21, r1
 c72:	80 f0       	brcs	.+32     	; 0xc94 <__mulsf3_pse+0xa0>
 c74:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>
 c78:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>
 c7c:	5f 3f       	cpi	r21, 0xFF	; 255
 c7e:	e4 f3       	brlt	.-8      	; 0xc78 <__mulsf3_pse+0x84>
 c80:	98 3e       	cpi	r25, 0xE8	; 232
 c82:	d4 f3       	brlt	.-12     	; 0xc78 <__mulsf3_pse+0x84>
 c84:	86 95       	lsr	r24
 c86:	77 95       	ror	r23
 c88:	67 95       	ror	r22
 c8a:	b7 95       	ror	r27
 c8c:	f7 95       	ror	r31
 c8e:	e7 95       	ror	r30
 c90:	9f 5f       	subi	r25, 0xFF	; 255
 c92:	c1 f7       	brne	.-16     	; 0xc84 <__mulsf3_pse+0x90>
 c94:	fe 2b       	or	r31, r30
 c96:	88 0f       	add	r24, r24
 c98:	91 1d       	adc	r25, r1
 c9a:	96 95       	lsr	r25
 c9c:	87 95       	ror	r24
 c9e:	97 f9       	bld	r25, 7
 ca0:	08 95       	ret

00000ca2 <__fp_mpack>:
 ca2:	9f 3f       	cpi	r25, 0xFF	; 255
 ca4:	31 f0       	breq	.+12     	; 0xcb2 <__fp_mpack_finite+0xc>

00000ca6 <__fp_mpack_finite>:
 ca6:	91 50       	subi	r25, 0x01	; 1
 ca8:	20 f4       	brcc	.+8      	; 0xcb2 <__fp_mpack_finite+0xc>
 caa:	87 95       	ror	r24
 cac:	77 95       	ror	r23
 cae:	67 95       	ror	r22
 cb0:	b7 95       	ror	r27
 cb2:	88 0f       	add	r24, r24
 cb4:	91 1d       	adc	r25, r1
 cb6:	96 95       	lsr	r25
 cb8:	87 95       	ror	r24
 cba:	97 f9       	bld	r25, 7
 cbc:	08 95       	ret

00000cbe <__fp_powser>:
 cbe:	df 93       	push	r29
 cc0:	cf 93       	push	r28
 cc2:	1f 93       	push	r17
 cc4:	0f 93       	push	r16
 cc6:	ff 92       	push	r15
 cc8:	ef 92       	push	r14
 cca:	df 92       	push	r13
 ccc:	7b 01       	movw	r14, r22
 cce:	8c 01       	movw	r16, r24
 cd0:	68 94       	set
 cd2:	06 c0       	rjmp	.+12     	; 0xce0 <__fp_powser+0x22>
 cd4:	da 2e       	mov	r13, r26
 cd6:	ef 01       	movw	r28, r30
 cd8:	0e 94 f7 05 	call	0xbee	; 0xbee <__mulsf3x>
 cdc:	fe 01       	movw	r30, r28
 cde:	e8 94       	clt
 ce0:	a5 91       	lpm	r26, Z+
 ce2:	25 91       	lpm	r18, Z+
 ce4:	35 91       	lpm	r19, Z+
 ce6:	45 91       	lpm	r20, Z+
 ce8:	55 91       	lpm	r21, Z+
 cea:	a6 f3       	brts	.-24     	; 0xcd4 <__fp_powser+0x16>
 cec:	ef 01       	movw	r28, r30
 cee:	0e 94 10 04 	call	0x820	; 0x820 <__addsf3x>
 cf2:	fe 01       	movw	r30, r28
 cf4:	97 01       	movw	r18, r14
 cf6:	a8 01       	movw	r20, r16
 cf8:	da 94       	dec	r13
 cfa:	69 f7       	brne	.-38     	; 0xcd6 <__fp_powser+0x18>
 cfc:	df 90       	pop	r13
 cfe:	ef 90       	pop	r14
 d00:	ff 90       	pop	r15
 d02:	0f 91       	pop	r16
 d04:	1f 91       	pop	r17
 d06:	cf 91       	pop	r28
 d08:	df 91       	pop	r29
 d0a:	08 95       	ret

00000d0c <itoa>:
 d0c:	45 32       	cpi	r20, 0x25	; 37
 d0e:	51 05       	cpc	r21, r1
 d10:	20 f4       	brcc	.+8      	; 0xd1a <itoa+0xe>
 d12:	42 30       	cpi	r20, 0x02	; 2
 d14:	10 f0       	brcs	.+4      	; 0xd1a <itoa+0xe>
 d16:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__itoa_ncheck>
 d1a:	fb 01       	movw	r30, r22
 d1c:	10 82       	st	Z, r1
 d1e:	cb 01       	movw	r24, r22
 d20:	08 95       	ret

00000d22 <__itoa_ncheck>:
 d22:	bb 27       	eor	r27, r27
 d24:	4a 30       	cpi	r20, 0x0A	; 10
 d26:	31 f4       	brne	.+12     	; 0xd34 <__itoa_ncheck+0x12>
 d28:	99 23       	and	r25, r25
 d2a:	22 f4       	brpl	.+8      	; 0xd34 <__itoa_ncheck+0x12>
 d2c:	bd e2       	ldi	r27, 0x2D	; 45
 d2e:	90 95       	com	r25
 d30:	81 95       	neg	r24
 d32:	9f 4f       	sbci	r25, 0xFF	; 255
 d34:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__utoa_common>

00000d38 <__utoa_ncheck>:
 d38:	bb 27       	eor	r27, r27

00000d3a <__utoa_common>:
 d3a:	fb 01       	movw	r30, r22
 d3c:	55 27       	eor	r21, r21
 d3e:	aa 27       	eor	r26, r26
 d40:	88 0f       	add	r24, r24
 d42:	99 1f       	adc	r25, r25
 d44:	aa 1f       	adc	r26, r26
 d46:	a4 17       	cp	r26, r20
 d48:	10 f0       	brcs	.+4      	; 0xd4e <__utoa_common+0x14>
 d4a:	a4 1b       	sub	r26, r20
 d4c:	83 95       	inc	r24
 d4e:	50 51       	subi	r21, 0x10	; 16
 d50:	b9 f7       	brne	.-18     	; 0xd40 <__utoa_common+0x6>
 d52:	a0 5d       	subi	r26, 0xD0	; 208
 d54:	aa 33       	cpi	r26, 0x3A	; 58
 d56:	08 f0       	brcs	.+2      	; 0xd5a <__utoa_common+0x20>
 d58:	a9 5d       	subi	r26, 0xD9	; 217
 d5a:	a1 93       	st	Z+, r26
 d5c:	00 97       	sbiw	r24, 0x00	; 0
 d5e:	79 f7       	brne	.-34     	; 0xd3e <__utoa_common+0x4>
 d60:	b1 11       	cpse	r27, r1
 d62:	b1 93       	st	Z+, r27
 d64:	11 92       	st	Z+, r1
 d66:	cb 01       	movw	r24, r22
 d68:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <strrev>

00000d6c <strrev>:
 d6c:	dc 01       	movw	r26, r24
 d6e:	fc 01       	movw	r30, r24
 d70:	67 2f       	mov	r22, r23
 d72:	71 91       	ld	r23, Z+
 d74:	77 23       	and	r23, r23
 d76:	e1 f7       	brne	.-8      	; 0xd70 <strrev+0x4>
 d78:	32 97       	sbiw	r30, 0x02	; 2
 d7a:	04 c0       	rjmp	.+8      	; 0xd84 <strrev+0x18>
 d7c:	7c 91       	ld	r23, X
 d7e:	6d 93       	st	X+, r22
 d80:	70 83       	st	Z, r23
 d82:	62 91       	ld	r22, -Z
 d84:	ae 17       	cp	r26, r30
 d86:	bf 07       	cpc	r27, r31
 d88:	c8 f3       	brcs	.-14     	; 0xd7c <strrev+0x10>
 d8a:	08 95       	ret

00000d8c <_exit>:
 d8c:	f8 94       	cli

00000d8e <__stop_program>:
 d8e:	ff cf       	rjmp	.-2      	; 0xd8e <__stop_program>
