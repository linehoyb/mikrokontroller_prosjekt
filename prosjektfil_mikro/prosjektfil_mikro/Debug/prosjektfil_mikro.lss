
prosjektfil_mikro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  0000087a  0000090e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000087a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800136  00800136  00000944  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000974  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000112b  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000888  00000000  00000000  00001ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007cc  00000000  00000000  0000242f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00002bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000572  00000000  00000000  00002e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a6a  00000000  00000000  000033da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003e44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e3       	ldi	r26, 0x36	; 54
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 33       	cpi	r26, 0x3A	; 58
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c1 01 	call	0x382	; 0x382 <main>
  9e:	0c 94 3b 04 	jmp	0x876	; 0x876 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
		DDRB = (1<<DDB2);
		_delay_ms(1000);
		DDRB = (0<<DDB2);
		_delay_ms(500);
	}
}
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 68       	ori	r24, 0x87	; 135
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <USART_init>:
  bc:	87 e6       	ldi	r24, 0x67	; 103
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c8:	88 e1       	ldi	r24, 0x18	; 24
  ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  ce:	08 95       	ret

000000d0 <timer_init>:
  d0:	88 e0       	ldi	r24, 0x08	; 8
  d2:	9d e3       	ldi	r25, 0x3D	; 61
  d4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  dc:	e1 e8       	ldi	r30, 0x81	; 129
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	80 83       	st	Z, r24
  e6:	af e6       	ldi	r26, 0x6F	; 111
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	8c 91       	ld	r24, X
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	8c 93       	st	X, r24
  f0:	80 81       	ld	r24, Z
  f2:	85 60       	ori	r24, 0x05	; 5
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <buzzer_init>:
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	84 b9       	out	0x04, r24	; 4
  fc:	82 e4       	ldi	r24, 0x42	; 66
  fe:	84 bd       	out	0x24, r24	; 36
 100:	85 e0       	ldi	r24, 0x05	; 5
 102:	85 bd       	out	0x25, r24	; 37
 104:	8d e0       	ldi	r24, 0x0D	; 13
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 10c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 110:	08 95       	ret

00000112 <LCD_Action>:
 112:	9b b1       	in	r25, 0x0b	; 11
 114:	9f 70       	andi	r25, 0x0F	; 15
 116:	28 2f       	mov	r18, r24
 118:	20 7f       	andi	r18, 0xF0	; 240
 11a:	92 2b       	or	r25, r18
 11c:	9b b9       	out	0x0b, r25	; 11
 11e:	9b b1       	in	r25, 0x0b	; 11
 120:	9e 7f       	andi	r25, 0xFE	; 254
 122:	9b b9       	out	0x0b, r25	; 11
 124:	9b b1       	in	r25, 0x0b	; 11
 126:	92 60       	ori	r25, 0x02	; 2
 128:	9b b9       	out	0x0b, r25	; 11
 12a:	35 e0       	ldi	r19, 0x05	; 5
 12c:	3a 95       	dec	r19
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_Action+0x1a>
 130:	00 00       	nop
 132:	9b b1       	in	r25, 0x0b	; 11
 134:	9d 7f       	andi	r25, 0xFD	; 253
 136:	9b b9       	out	0x0b, r25	; 11
 138:	ef e1       	ldi	r30, 0x1F	; 31
 13a:	f3 e0       	ldi	r31, 0x03	; 3
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_Action+0x2a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_Action+0x30>
 142:	00 00       	nop
 144:	2b b1       	in	r18, 0x0b	; 11
 146:	f0 e1       	ldi	r31, 0x10	; 16
 148:	8f 9f       	mul	r24, r31
 14a:	c0 01       	movw	r24, r0
 14c:	11 24       	eor	r1, r1
 14e:	92 2f       	mov	r25, r18
 150:	9f 70       	andi	r25, 0x0F	; 15
 152:	89 2b       	or	r24, r25
 154:	8b b9       	out	0x0b, r24	; 11
 156:	8b b1       	in	r24, 0x0b	; 11
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	8b b9       	out	0x0b, r24	; 11
 15c:	35 e0       	ldi	r19, 0x05	; 5
 15e:	3a 95       	dec	r19
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_Action+0x4c>
 162:	00 00       	nop
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	8b b9       	out	0x0b, r24	; 11
 16a:	8f e3       	ldi	r24, 0x3F	; 63
 16c:	9f e1       	ldi	r25, 0x1F	; 31
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_Action+0x5c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_Action+0x62>
 174:	00 00       	nop
 176:	08 95       	ret

00000178 <LCD_init>:
 178:	8f e5       	ldi	r24, 0x5F	; 95
 17a:	9a ee       	ldi	r25, 0xEA	; 234
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_init+0x4>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_init+0xa>
 182:	00 00       	nop
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	0e 94 89 00 	call	0x112	; 0x112 <LCD_Action>
 18a:	88 e2       	ldi	r24, 0x28	; 40
 18c:	0e 94 89 00 	call	0x112	; 0x112 <LCD_Action>
 190:	8c e0       	ldi	r24, 0x0C	; 12
 192:	0e 94 89 00 	call	0x112	; 0x112 <LCD_Action>
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	0e 94 89 00 	call	0x112	; 0x112 <LCD_Action>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 89 00 	call	0x112	; 0x112 <LCD_Action>
 1a2:	8f e3       	ldi	r24, 0x3F	; 63
 1a4:	9f e1       	ldi	r25, 0x1F	; 31
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_init+0x2e>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_init+0x34>
 1ac:	00 00       	nop
 1ae:	08 95       	ret

000001b0 <transmitByte>:
 1b0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1b4:	95 ff       	sbrs	r25, 5
 1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <transmitByte>
 1b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1bc:	08 95       	ret

000001be <printString>:
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	8c 01       	movw	r16, r24
 1c6:	c0 e0       	ldi	r28, 0x00	; 0
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <printString+0x12>
 1ca:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmitByte>
 1ce:	cf 5f       	subi	r28, 0xFF	; 255
 1d0:	f8 01       	movw	r30, r16
 1d2:	ec 0f       	add	r30, r28
 1d4:	f1 1d       	adc	r31, r1
 1d6:	80 81       	ld	r24, Z
 1d8:	81 11       	cpse	r24, r1
 1da:	f7 cf       	rjmp	.-18     	; 0x1ca <printString+0xc>
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <read_ADC>:
 1e4:	ec e7       	ldi	r30, 0x7C	; 124
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	90 81       	ld	r25, Z
 1ea:	90 7f       	andi	r25, 0xF0	; 240
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	89 2b       	or	r24, r25
 1f0:	80 83       	st	Z, r24
 1f2:	ea e7       	ldi	r30, 0x7A	; 122
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	80 64       	ori	r24, 0x40	; 64
 1fa:	80 83       	st	Z, r24
 1fc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 200:	86 fd       	sbrc	r24, 6
 202:	fc cf       	rjmp	.-8      	; 0x1fc <read_ADC+0x18>
 204:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 208:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 20c:	08 95       	ret

0000020e <print_value>:
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	8c 01       	movw	r16, r24
 218:	9c 01       	movw	r18, r24
 21a:	36 95       	lsr	r19
 21c:	27 95       	ror	r18
 21e:	36 95       	lsr	r19
 220:	27 95       	ror	r18
 222:	ab e7       	ldi	r26, 0x7B	; 123
 224:	b4 e1       	ldi	r27, 0x14	; 20
 226:	0e 94 2c 04 	call	0x858	; 0x858 <__umulhisi3>
 22a:	ac 01       	movw	r20, r24
 22c:	56 95       	lsr	r21
 22e:	47 95       	ror	r20
 230:	9a 01       	movw	r18, r20
 232:	ad ec       	ldi	r26, 0xCD	; 205
 234:	bc ec       	ldi	r27, 0xCC	; 204
 236:	0e 94 2c 04 	call	0x858	; 0x858 <__umulhisi3>
 23a:	96 95       	lsr	r25
 23c:	87 95       	ror	r24
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	96 95       	lsr	r25
 244:	87 95       	ror	r24
 246:	9c 01       	movw	r18, r24
 248:	22 0f       	add	r18, r18
 24a:	33 1f       	adc	r19, r19
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	82 0f       	add	r24, r18
 25a:	93 1f       	adc	r25, r19
 25c:	9a 01       	movw	r18, r20
 25e:	28 1b       	sub	r18, r24
 260:	39 0b       	sbc	r19, r25
 262:	c9 01       	movw	r24, r18
 264:	80 5d       	subi	r24, 0xD0	; 208
 266:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmitByte>
 26a:	98 01       	movw	r18, r16
 26c:	ad ec       	ldi	r26, 0xCD	; 205
 26e:	bc ec       	ldi	r27, 0xCC	; 204
 270:	0e 94 2c 04 	call	0x858	; 0x858 <__umulhisi3>
 274:	ec 01       	movw	r28, r24
 276:	d6 95       	lsr	r29
 278:	c7 95       	ror	r28
 27a:	d6 95       	lsr	r29
 27c:	c7 95       	ror	r28
 27e:	d6 95       	lsr	r29
 280:	c7 95       	ror	r28
 282:	9e 01       	movw	r18, r28
 284:	0e 94 2c 04 	call	0x858	; 0x858 <__umulhisi3>
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	9c 01       	movw	r18, r24
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	82 0f       	add	r24, r18
 2a8:	93 1f       	adc	r25, r19
 2aa:	9e 01       	movw	r18, r28
 2ac:	28 1b       	sub	r18, r24
 2ae:	39 0b       	sbc	r19, r25
 2b0:	c9 01       	movw	r24, r18
 2b2:	80 5d       	subi	r24, 0xD0	; 208
 2b4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmitByte>
 2b8:	ce 01       	movw	r24, r28
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	cc 0f       	add	r28, r28
 2c0:	dd 1f       	adc	r29, r29
 2c2:	cc 0f       	add	r28, r28
 2c4:	dd 1f       	adc	r29, r29
 2c6:	cc 0f       	add	r28, r28
 2c8:	dd 1f       	adc	r29, r29
 2ca:	c8 0f       	add	r28, r24
 2cc:	d9 1f       	adc	r29, r25
 2ce:	c8 01       	movw	r24, r16
 2d0:	8c 1b       	sub	r24, r28
 2d2:	9d 0b       	sbc	r25, r29
 2d4:	80 5d       	subi	r24, 0xD0	; 208
 2d6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <transmitByte>
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 df 00 	call	0x1be	; 0x1be <printString>
 2e2:	8f e3       	ldi	r24, 0x3F	; 63
 2e4:	9c e9       	ldi	r25, 0x9C	; 156
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <print_value+0xd8>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <print_value+0xde>
 2ec:	00 00       	nop
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <ADC_to_seconds>:
 2f8:	bc 01       	movw	r22, r24
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 31 03 	call	0x662	; 0x662 <__floatunsisf>
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 ec       	ldi	r19, 0xC0	; 192
 306:	4f e7       	ldi	r20, 0x7F	; 127
 308:	54 e4       	ldi	r21, 0x44	; 68
 30a:	0e 94 90 02 	call	0x520	; 0x520 <__divsf3>
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	44 e3       	ldi	r20, 0x34	; 52
 314:	53 e4       	ldi	r21, 0x43	; 67
 316:	0e 94 bf 03 	call	0x77e	; 0x77e <__mulsf3>
 31a:	0e 94 02 03 	call	0x604	; 0x604 <__fixunssfsi>
 31e:	86 2f       	mov	r24, r22
 320:	08 95       	ret

00000322 <debounce>:

uint8_t debounce(uint8_t button_pin) {
	if (bit_is_clear(PINB, button_pin)) {      /* button is pressed now */
 322:	23 b1       	in	r18, 0x03	; 3
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	08 2e       	mov	r0, r24
 328:	02 c0       	rjmp	.+4      	; 0x32e <debounce+0xc>
 32a:	35 95       	asr	r19
 32c:	27 95       	ror	r18
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <debounce+0x8>
 332:	20 fd       	sbrc	r18, 0
 334:	12 c0       	rjmp	.+36     	; 0x35a <debounce+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 336:	ef e9       	ldi	r30, 0x9F	; 159
 338:	ff e0       	ldi	r31, 0x0F	; 15
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <debounce+0x18>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <debounce+0x1e>
 340:	00 00       	nop
		_delay_us(DEBOUNCE_TIME);
		if (bit_is_clear(PINB, button_pin)) {            /* still pressed */
 342:	23 b1       	in	r18, 0x03	; 3
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	a9 01       	movw	r20, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <debounce+0x2c>
 34a:	55 95       	asr	r21
 34c:	47 95       	ror	r20
 34e:	8a 95       	dec	r24
 350:	e2 f7       	brpl	.-8      	; 0x34a <debounce+0x28>
 352:	40 fd       	sbrc	r20, 0
 354:	04 c0       	rjmp	.+8      	; 0x35e <debounce+0x3c>
			return 1;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	08 95       	ret
		}
	}
	return 0;
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	08 95       	ret
 35e:	80 e0       	ldi	r24, 0x00	; 0
}
 360:	08 95       	ret

00000362 <get_button_status>:

uint8_t get_button_status(uint8_t button)
{
	if (debounce(button)) {                        /* debounced button press */
 362:	0e 94 91 01 	call	0x322	; 0x322 <debounce>
 366:	88 23       	and	r24, r24
 368:	41 f0       	breq	.+16     	; 0x37a <get_button_status+0x18>
		if (buttonWasPressed == 0) {     /* but wasn't last time through */
 36a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <buttonWasPressed>
 36e:	81 11       	cpse	r24, r1
 370:	07 c0       	rjmp	.+14     	; 0x380 <get_button_status+0x1e>
			buttonWasPressed = 1;                      /* update the state */
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <buttonWasPressed>
			return 1;
 378:	08 95       	ret
		}
	}
	else {                                /* button is not pressed now */
		buttonWasPressed = 0;                        /* update the state */
 37a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <buttonWasPressed>
		return 0;
 37e:	08 95       	ret
	}
}  
 380:	08 95       	ret

00000382 <main>:

int main(void)
{	
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	00 d0       	rcall	.+0      	; 0x388 <main+0x6>
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
	ADC_init();
 38c:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	USART_init();
 390:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_init>
	timer_init();
 394:	0e 94 68 00 	call	0xd0	; 0xd0 <timer_init>
	buzzer_init();
 398:	0e 94 7c 00 	call	0xf8	; 0xf8 <buzzer_init>
	LCD_init();
 39c:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_init>
	buzzer_init();
 3a0:	0e 94 7c 00 	call	0xf8	; 0xf8 <buzzer_init>
	
	PORTB |= (1<<PAUSE_PIN) | (1<<START_PIN); // Internal pull-up for buttons
 3a4:	85 b1       	in	r24, 0x05	; 5
 3a6:	88 61       	ori	r24, 0x18	; 24
 3a8:	85 b9       	out	0x05, r24	; 5
	DDRD |= 0xFF; // LDC and LED outputs
 3aa:	8a b1       	in	r24, 0x0a	; 10
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DDB0); // green LED output
 3b0:	84 b1       	in	r24, 0x04	; 4
 3b2:	81 60       	ori	r24, 0x01	; 1
 3b4:	84 b9       	out	0x04, r24	; 4
	
	R_Y_LED_PORT |= (1<<RED_LED); // Turn on red LED
 3b6:	8b b1       	in	r24, 0x0b	; 11
 3b8:	84 60       	ori	r24, 0x04	; 4
 3ba:	8b b9       	out	0x0b, r24	; 11
 3bc:	26 c0       	rjmp	.+76     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	
	while (1)
	{
		while (timer_running == 0 && start_pressed == 0)
		{
			cli();
 3be:	f8 94       	cli
			volatile uint16_t pot_value = read_ADC(POT_PIN);
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <read_ADC>
 3c6:	9a 83       	std	Y+2, r25	; 0x02
 3c8:	89 83       	std	Y+1, r24	; 0x01
			seconds = ADC_to_seconds(pot_value);
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	9a 81       	ldd	r25, Y+2	; 0x02
 3ce:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ADC_to_seconds>
 3d2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
			printString("Set time at: ");
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	0e 94 df 00 	call	0x1be	; 0x1be <printString>
			print_value(seconds);
 3de:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 07 01 	call	0x20e	; 0x20e <print_value>
			
			start_pressed = get_button_status(START_PIN);
 3e8:	83 e0       	ldi	r24, 0x03	; 3
 3ea:	0e 94 b1 01 	call	0x362	; 0x362 <get_button_status>
 3ee:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <start_pressed>
			
			if (start_pressed)
 3f2:	88 23       	and	r24, r24
 3f4:	51 f0       	breq	.+20     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			{
				timer_running = 1;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timer_running>
				G_LED_PORT |= (1<<GREEN_LED); // turn on green LED
 3fc:	85 b1       	in	r24, 0x05	; 5
 3fe:	81 60       	ori	r24, 0x01	; 1
 400:	85 b9       	out	0x05, r24	; 5
				R_Y_LED_PORT &= ~(1<<RED_LED); // turn off red LED
 402:	8b b1       	in	r24, 0x0b	; 11
 404:	8b 7f       	andi	r24, 0xFB	; 251
 406:	8b b9       	out	0x0b, r24	; 11
				sei();	// enable interrupts, also starts the countdown
 408:	78 94       	sei
	
	R_Y_LED_PORT |= (1<<RED_LED); // Turn on red LED
	
	while (1)
	{
		while (timer_running == 0 && start_pressed == 0)
 40a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <timer_running>
 40e:	81 11       	cpse	r24, r1
 410:	04 c0       	rjmp	.+8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 412:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <start_pressed>
 416:	88 23       	and	r24, r24
 418:	91 f2       	breq	.-92     	; 0x3be <main+0x3c>
				R_Y_LED_PORT &= ~(1<<RED_LED); // turn off red LED
				sei();	// enable interrupts, also starts the countdown
			}
		}
		
		printString("TIMER RUNNING!");
 41a:	80 e1       	ldi	r24, 0x10	; 16
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 df 00 	call	0x1be	; 0x1be <printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 422:	2f ef       	ldi	r18, 0xFF	; 255
 424:	83 ed       	ldi	r24, 0xD3	; 211
 426:	90 e3       	ldi	r25, 0x30	; 48
 428:	21 50       	subi	r18, 0x01	; 1
 42a:	80 40       	sbci	r24, 0x00	; 0
 42c:	90 40       	sbci	r25, 0x00	; 0
 42e:	e1 f7       	brne	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 432:	00 00       	nop
 434:	ea cf       	rjmp	.-44     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>

00000436 <__vector_11>:
	}
	return 0;
}

ISR (TIMER1_COMPA_vect) // action to be done every 1 sec
{
 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	11 24       	eor	r1, r1
 440:	2f 93       	push	r18
 442:	3f 93       	push	r19
 444:	4f 93       	push	r20
 446:	5f 93       	push	r21
 448:	6f 93       	push	r22
 44a:	7f 93       	push	r23
 44c:	8f 93       	push	r24
 44e:	9f 93       	push	r25
 450:	af 93       	push	r26
 452:	bf 93       	push	r27
 454:	ef 93       	push	r30
 456:	ff 93       	push	r31
	 seconds--; // Subtracts 1 from the timer value
 458:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 45c:	81 50       	subi	r24, 0x01	; 1
 45e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
	if (seconds == 0) 
 462:	81 11       	cpse	r24, r1
 464:	0f c0       	rjmp	.+30     	; 0x484 <__vector_11+0x4e>
	{
		printString("All done!");
 466:	8f e1       	ldi	r24, 0x1F	; 31
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 df 00 	call	0x1be	; 0x1be <printString>
		G_LED_PORT &= ~(1<<GREEN_LED); // turn off green LED
 46e:	85 b1       	in	r24, 0x05	; 5
 470:	8e 7f       	andi	r24, 0xFE	; 254
 472:	85 b9       	out	0x05, r24	; 5
		R_Y_LED_PORT |= (1<<RED_LED); // turn on red LED
 474:	8b b1       	in	r24, 0x0b	; 11
 476:	84 60       	ori	r24, 0x04	; 4
 478:	8b b9       	out	0x0b, r24	; 11
		timer_running = 0;
 47a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <timer_running>
		start_pressed = 0;
 47e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <start_pressed>
 482:	09 c0       	rjmp	.+18     	; 0x496 <__vector_11+0x60>
	}
	else
	{
		printString("Time left: ");
 484:	89 e2       	ldi	r24, 0x29	; 41
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	0e 94 df 00 	call	0x1be	; 0x1be <printString>
		print_value(seconds);
 48c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 07 01 	call	0x20e	; 0x20e <print_value>
	}
	
}
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	bf 91       	pop	r27
 49c:	af 91       	pop	r26
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	7f 91       	pop	r23
 4a4:	6f 91       	pop	r22
 4a6:	5f 91       	pop	r21
 4a8:	4f 91       	pop	r20
 4aa:	3f 91       	pop	r19
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	0f 90       	pop	r0
 4b4:	1f 90       	pop	r1
 4b6:	18 95       	reti

000004b8 <__vector_3>:

ISR (PCINT0_vect)
{
 4b8:	1f 92       	push	r1
 4ba:	0f 92       	push	r0
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	0f 92       	push	r0
 4c0:	11 24       	eor	r1, r1
 4c2:	2f 93       	push	r18
 4c4:	3f 93       	push	r19
 4c6:	4f 93       	push	r20
 4c8:	5f 93       	push	r21
 4ca:	6f 93       	push	r22
 4cc:	7f 93       	push	r23
 4ce:	8f 93       	push	r24
 4d0:	9f 93       	push	r25
 4d2:	af 93       	push	r26
 4d4:	bf 93       	push	r27
 4d6:	ef 93       	push	r30
 4d8:	ff 93       	push	r31
	R_Y_LED_PORT |= (1<<YELLOW_LED);
 4da:	8b b1       	in	r24, 0x0b	; 11
 4dc:	88 60       	ori	r24, 0x08	; 8
 4de:	8b b9       	out	0x0b, r24	; 11
	G_LED_PORT &= ~(1<<GREEN_LED);
 4e0:	85 b1       	in	r24, 0x05	; 5
 4e2:	8e 7f       	andi	r24, 0xFE	; 254
 4e4:	85 b9       	out	0x05, r24	; 5
	while(get_button_status(PAUSE_PIN) == 0) // wait for btn push again
 4e6:	03 c0       	rjmp	.+6      	; 0x4ee <__vector_3+0x36>
	G_LED_PORT |= (1<<GREEN_LED);
 4e8:	85 b1       	in	r24, 0x05	; 5
 4ea:	81 60       	ori	r24, 0x01	; 1
 4ec:	85 b9       	out	0x05, r24	; 5

ISR (PCINT0_vect)
{
	R_Y_LED_PORT |= (1<<YELLOW_LED);
	G_LED_PORT &= ~(1<<GREEN_LED);
	while(get_button_status(PAUSE_PIN) == 0) // wait for btn push again
 4ee:	84 e0       	ldi	r24, 0x04	; 4
 4f0:	0e 94 b1 01 	call	0x362	; 0x362 <get_button_status>
 4f4:	88 23       	and	r24, r24
 4f6:	c1 f3       	breq	.-16     	; 0x4e8 <__vector_3+0x30>
	G_LED_PORT |= (1<<GREEN_LED);
	R_Y_LED_PORT &= ~(1<<YELLOW_LED);
 4f8:	8b b1       	in	r24, 0x0b	; 11
 4fa:	87 7f       	andi	r24, 0xF7	; 247
 4fc:	8b b9       	out	0x0b, r24	; 11
 4fe:	ff 91       	pop	r31
 500:	ef 91       	pop	r30
 502:	bf 91       	pop	r27
 504:	af 91       	pop	r26
 506:	9f 91       	pop	r25
 508:	8f 91       	pop	r24
 50a:	7f 91       	pop	r23
 50c:	6f 91       	pop	r22
 50e:	5f 91       	pop	r21
 510:	4f 91       	pop	r20
 512:	3f 91       	pop	r19
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <__divsf3>:
 520:	0e 94 a4 02 	call	0x548	; 0x548 <__divsf3x>
 524:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_round>
 528:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__fp_pscB>
 52c:	58 f0       	brcs	.+22     	; 0x544 <__divsf3+0x24>
 52e:	0e 94 77 03 	call	0x6ee	; 0x6ee <__fp_pscA>
 532:	40 f0       	brcs	.+16     	; 0x544 <__divsf3+0x24>
 534:	29 f4       	brne	.+10     	; 0x540 <__divsf3+0x20>
 536:	5f 3f       	cpi	r21, 0xFF	; 255
 538:	29 f0       	breq	.+10     	; 0x544 <__divsf3+0x24>
 53a:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_inf>
 53e:	51 11       	cpse	r21, r1
 540:	0c 94 b9 03 	jmp	0x772	; 0x772 <__fp_szero>
 544:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__fp_nan>

00000548 <__divsf3x>:
 548:	0e 94 96 03 	call	0x72c	; 0x72c <__fp_split3>
 54c:	68 f3       	brcs	.-38     	; 0x528 <__divsf3+0x8>

0000054e <__divsf3_pse>:
 54e:	99 23       	and	r25, r25
 550:	b1 f3       	breq	.-20     	; 0x53e <__divsf3+0x1e>
 552:	55 23       	and	r21, r21
 554:	91 f3       	breq	.-28     	; 0x53a <__divsf3+0x1a>
 556:	95 1b       	sub	r25, r21
 558:	55 0b       	sbc	r21, r21
 55a:	bb 27       	eor	r27, r27
 55c:	aa 27       	eor	r26, r26
 55e:	62 17       	cp	r22, r18
 560:	73 07       	cpc	r23, r19
 562:	84 07       	cpc	r24, r20
 564:	38 f0       	brcs	.+14     	; 0x574 <__divsf3_pse+0x26>
 566:	9f 5f       	subi	r25, 0xFF	; 255
 568:	5f 4f       	sbci	r21, 0xFF	; 255
 56a:	22 0f       	add	r18, r18
 56c:	33 1f       	adc	r19, r19
 56e:	44 1f       	adc	r20, r20
 570:	aa 1f       	adc	r26, r26
 572:	a9 f3       	breq	.-22     	; 0x55e <__divsf3_pse+0x10>
 574:	35 d0       	rcall	.+106    	; 0x5e0 <__divsf3_pse+0x92>
 576:	0e 2e       	mov	r0, r30
 578:	3a f0       	brmi	.+14     	; 0x588 <__divsf3_pse+0x3a>
 57a:	e0 e8       	ldi	r30, 0x80	; 128
 57c:	32 d0       	rcall	.+100    	; 0x5e2 <__divsf3_pse+0x94>
 57e:	91 50       	subi	r25, 0x01	; 1
 580:	50 40       	sbci	r21, 0x00	; 0
 582:	e6 95       	lsr	r30
 584:	00 1c       	adc	r0, r0
 586:	ca f7       	brpl	.-14     	; 0x57a <__divsf3_pse+0x2c>
 588:	2b d0       	rcall	.+86     	; 0x5e0 <__divsf3_pse+0x92>
 58a:	fe 2f       	mov	r31, r30
 58c:	29 d0       	rcall	.+82     	; 0x5e0 <__divsf3_pse+0x92>
 58e:	66 0f       	add	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	88 1f       	adc	r24, r24
 594:	bb 1f       	adc	r27, r27
 596:	26 17       	cp	r18, r22
 598:	37 07       	cpc	r19, r23
 59a:	48 07       	cpc	r20, r24
 59c:	ab 07       	cpc	r26, r27
 59e:	b0 e8       	ldi	r27, 0x80	; 128
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <__divsf3_pse+0x56>
 5a2:	bb 0b       	sbc	r27, r27
 5a4:	80 2d       	mov	r24, r0
 5a6:	bf 01       	movw	r22, r30
 5a8:	ff 27       	eor	r31, r31
 5aa:	93 58       	subi	r25, 0x83	; 131
 5ac:	5f 4f       	sbci	r21, 0xFF	; 255
 5ae:	3a f0       	brmi	.+14     	; 0x5be <__divsf3_pse+0x70>
 5b0:	9e 3f       	cpi	r25, 0xFE	; 254
 5b2:	51 05       	cpc	r21, r1
 5b4:	78 f0       	brcs	.+30     	; 0x5d4 <__divsf3_pse+0x86>
 5b6:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_inf>
 5ba:	0c 94 b9 03 	jmp	0x772	; 0x772 <__fp_szero>
 5be:	5f 3f       	cpi	r21, 0xFF	; 255
 5c0:	e4 f3       	brlt	.-8      	; 0x5ba <__divsf3_pse+0x6c>
 5c2:	98 3e       	cpi	r25, 0xE8	; 232
 5c4:	d4 f3       	brlt	.-12     	; 0x5ba <__divsf3_pse+0x6c>
 5c6:	86 95       	lsr	r24
 5c8:	77 95       	ror	r23
 5ca:	67 95       	ror	r22
 5cc:	b7 95       	ror	r27
 5ce:	f7 95       	ror	r31
 5d0:	9f 5f       	subi	r25, 0xFF	; 255
 5d2:	c9 f7       	brne	.-14     	; 0x5c6 <__divsf3_pse+0x78>
 5d4:	88 0f       	add	r24, r24
 5d6:	91 1d       	adc	r25, r1
 5d8:	96 95       	lsr	r25
 5da:	87 95       	ror	r24
 5dc:	97 f9       	bld	r25, 7
 5de:	08 95       	ret
 5e0:	e1 e0       	ldi	r30, 0x01	; 1
 5e2:	66 0f       	add	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	bb 1f       	adc	r27, r27
 5ea:	62 17       	cp	r22, r18
 5ec:	73 07       	cpc	r23, r19
 5ee:	84 07       	cpc	r24, r20
 5f0:	ba 07       	cpc	r27, r26
 5f2:	20 f0       	brcs	.+8      	; 0x5fc <__divsf3_pse+0xae>
 5f4:	62 1b       	sub	r22, r18
 5f6:	73 0b       	sbc	r23, r19
 5f8:	84 0b       	sbc	r24, r20
 5fa:	ba 0b       	sbc	r27, r26
 5fc:	ee 1f       	adc	r30, r30
 5fe:	88 f7       	brcc	.-30     	; 0x5e2 <__divsf3_pse+0x94>
 600:	e0 95       	com	r30
 602:	08 95       	ret

00000604 <__fixunssfsi>:
 604:	0e 94 9e 03 	call	0x73c	; 0x73c <__fp_splitA>
 608:	88 f0       	brcs	.+34     	; 0x62c <__fixunssfsi+0x28>
 60a:	9f 57       	subi	r25, 0x7F	; 127
 60c:	98 f0       	brcs	.+38     	; 0x634 <__fixunssfsi+0x30>
 60e:	b9 2f       	mov	r27, r25
 610:	99 27       	eor	r25, r25
 612:	b7 51       	subi	r27, 0x17	; 23
 614:	b0 f0       	brcs	.+44     	; 0x642 <__fixunssfsi+0x3e>
 616:	e1 f0       	breq	.+56     	; 0x650 <__fixunssfsi+0x4c>
 618:	66 0f       	add	r22, r22
 61a:	77 1f       	adc	r23, r23
 61c:	88 1f       	adc	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	1a f0       	brmi	.+6      	; 0x628 <__fixunssfsi+0x24>
 622:	ba 95       	dec	r27
 624:	c9 f7       	brne	.-14     	; 0x618 <__fixunssfsi+0x14>
 626:	14 c0       	rjmp	.+40     	; 0x650 <__fixunssfsi+0x4c>
 628:	b1 30       	cpi	r27, 0x01	; 1
 62a:	91 f0       	breq	.+36     	; 0x650 <__fixunssfsi+0x4c>
 62c:	0e 94 b8 03 	call	0x770	; 0x770 <__fp_zero>
 630:	b1 e0       	ldi	r27, 0x01	; 1
 632:	08 95       	ret
 634:	0c 94 b8 03 	jmp	0x770	; 0x770 <__fp_zero>
 638:	67 2f       	mov	r22, r23
 63a:	78 2f       	mov	r23, r24
 63c:	88 27       	eor	r24, r24
 63e:	b8 5f       	subi	r27, 0xF8	; 248
 640:	39 f0       	breq	.+14     	; 0x650 <__fixunssfsi+0x4c>
 642:	b9 3f       	cpi	r27, 0xF9	; 249
 644:	cc f3       	brlt	.-14     	; 0x638 <__fixunssfsi+0x34>
 646:	86 95       	lsr	r24
 648:	77 95       	ror	r23
 64a:	67 95       	ror	r22
 64c:	b3 95       	inc	r27
 64e:	d9 f7       	brne	.-10     	; 0x646 <__fixunssfsi+0x42>
 650:	3e f4       	brtc	.+14     	; 0x660 <__fixunssfsi+0x5c>
 652:	90 95       	com	r25
 654:	80 95       	com	r24
 656:	70 95       	com	r23
 658:	61 95       	neg	r22
 65a:	7f 4f       	sbci	r23, 0xFF	; 255
 65c:	8f 4f       	sbci	r24, 0xFF	; 255
 65e:	9f 4f       	sbci	r25, 0xFF	; 255
 660:	08 95       	ret

00000662 <__floatunsisf>:
 662:	e8 94       	clt
 664:	09 c0       	rjmp	.+18     	; 0x678 <__floatsisf+0x12>

00000666 <__floatsisf>:
 666:	97 fb       	bst	r25, 7
 668:	3e f4       	brtc	.+14     	; 0x678 <__floatsisf+0x12>
 66a:	90 95       	com	r25
 66c:	80 95       	com	r24
 66e:	70 95       	com	r23
 670:	61 95       	neg	r22
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	8f 4f       	sbci	r24, 0xFF	; 255
 676:	9f 4f       	sbci	r25, 0xFF	; 255
 678:	99 23       	and	r25, r25
 67a:	a9 f0       	breq	.+42     	; 0x6a6 <__floatsisf+0x40>
 67c:	f9 2f       	mov	r31, r25
 67e:	96 e9       	ldi	r25, 0x96	; 150
 680:	bb 27       	eor	r27, r27
 682:	93 95       	inc	r25
 684:	f6 95       	lsr	r31
 686:	87 95       	ror	r24
 688:	77 95       	ror	r23
 68a:	67 95       	ror	r22
 68c:	b7 95       	ror	r27
 68e:	f1 11       	cpse	r31, r1
 690:	f8 cf       	rjmp	.-16     	; 0x682 <__floatsisf+0x1c>
 692:	fa f4       	brpl	.+62     	; 0x6d2 <__floatsisf+0x6c>
 694:	bb 0f       	add	r27, r27
 696:	11 f4       	brne	.+4      	; 0x69c <__floatsisf+0x36>
 698:	60 ff       	sbrs	r22, 0
 69a:	1b c0       	rjmp	.+54     	; 0x6d2 <__floatsisf+0x6c>
 69c:	6f 5f       	subi	r22, 0xFF	; 255
 69e:	7f 4f       	sbci	r23, 0xFF	; 255
 6a0:	8f 4f       	sbci	r24, 0xFF	; 255
 6a2:	9f 4f       	sbci	r25, 0xFF	; 255
 6a4:	16 c0       	rjmp	.+44     	; 0x6d2 <__floatsisf+0x6c>
 6a6:	88 23       	and	r24, r24
 6a8:	11 f0       	breq	.+4      	; 0x6ae <__floatsisf+0x48>
 6aa:	96 e9       	ldi	r25, 0x96	; 150
 6ac:	11 c0       	rjmp	.+34     	; 0x6d0 <__floatsisf+0x6a>
 6ae:	77 23       	and	r23, r23
 6b0:	21 f0       	breq	.+8      	; 0x6ba <__floatsisf+0x54>
 6b2:	9e e8       	ldi	r25, 0x8E	; 142
 6b4:	87 2f       	mov	r24, r23
 6b6:	76 2f       	mov	r23, r22
 6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <__floatsisf+0x5e>
 6ba:	66 23       	and	r22, r22
 6bc:	71 f0       	breq	.+28     	; 0x6da <__floatsisf+0x74>
 6be:	96 e8       	ldi	r25, 0x86	; 134
 6c0:	86 2f       	mov	r24, r22
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	2a f0       	brmi	.+10     	; 0x6d2 <__floatsisf+0x6c>
 6c8:	9a 95       	dec	r25
 6ca:	66 0f       	add	r22, r22
 6cc:	77 1f       	adc	r23, r23
 6ce:	88 1f       	adc	r24, r24
 6d0:	da f7       	brpl	.-10     	; 0x6c8 <__floatsisf+0x62>
 6d2:	88 0f       	add	r24, r24
 6d4:	96 95       	lsr	r25
 6d6:	87 95       	ror	r24
 6d8:	97 f9       	bld	r25, 7
 6da:	08 95       	ret

000006dc <__fp_inf>:
 6dc:	97 f9       	bld	r25, 7
 6de:	9f 67       	ori	r25, 0x7F	; 127
 6e0:	80 e8       	ldi	r24, 0x80	; 128
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	60 e0       	ldi	r22, 0x00	; 0
 6e6:	08 95       	ret

000006e8 <__fp_nan>:
 6e8:	9f ef       	ldi	r25, 0xFF	; 255
 6ea:	80 ec       	ldi	r24, 0xC0	; 192
 6ec:	08 95       	ret

000006ee <__fp_pscA>:
 6ee:	00 24       	eor	r0, r0
 6f0:	0a 94       	dec	r0
 6f2:	16 16       	cp	r1, r22
 6f4:	17 06       	cpc	r1, r23
 6f6:	18 06       	cpc	r1, r24
 6f8:	09 06       	cpc	r0, r25
 6fa:	08 95       	ret

000006fc <__fp_pscB>:
 6fc:	00 24       	eor	r0, r0
 6fe:	0a 94       	dec	r0
 700:	12 16       	cp	r1, r18
 702:	13 06       	cpc	r1, r19
 704:	14 06       	cpc	r1, r20
 706:	05 06       	cpc	r0, r21
 708:	08 95       	ret

0000070a <__fp_round>:
 70a:	09 2e       	mov	r0, r25
 70c:	03 94       	inc	r0
 70e:	00 0c       	add	r0, r0
 710:	11 f4       	brne	.+4      	; 0x716 <__fp_round+0xc>
 712:	88 23       	and	r24, r24
 714:	52 f0       	brmi	.+20     	; 0x72a <__fp_round+0x20>
 716:	bb 0f       	add	r27, r27
 718:	40 f4       	brcc	.+16     	; 0x72a <__fp_round+0x20>
 71a:	bf 2b       	or	r27, r31
 71c:	11 f4       	brne	.+4      	; 0x722 <__fp_round+0x18>
 71e:	60 ff       	sbrs	r22, 0
 720:	04 c0       	rjmp	.+8      	; 0x72a <__fp_round+0x20>
 722:	6f 5f       	subi	r22, 0xFF	; 255
 724:	7f 4f       	sbci	r23, 0xFF	; 255
 726:	8f 4f       	sbci	r24, 0xFF	; 255
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	08 95       	ret

0000072c <__fp_split3>:
 72c:	57 fd       	sbrc	r21, 7
 72e:	90 58       	subi	r25, 0x80	; 128
 730:	44 0f       	add	r20, r20
 732:	55 1f       	adc	r21, r21
 734:	59 f0       	breq	.+22     	; 0x74c <__fp_splitA+0x10>
 736:	5f 3f       	cpi	r21, 0xFF	; 255
 738:	71 f0       	breq	.+28     	; 0x756 <__fp_splitA+0x1a>
 73a:	47 95       	ror	r20

0000073c <__fp_splitA>:
 73c:	88 0f       	add	r24, r24
 73e:	97 fb       	bst	r25, 7
 740:	99 1f       	adc	r25, r25
 742:	61 f0       	breq	.+24     	; 0x75c <__fp_splitA+0x20>
 744:	9f 3f       	cpi	r25, 0xFF	; 255
 746:	79 f0       	breq	.+30     	; 0x766 <__fp_splitA+0x2a>
 748:	87 95       	ror	r24
 74a:	08 95       	ret
 74c:	12 16       	cp	r1, r18
 74e:	13 06       	cpc	r1, r19
 750:	14 06       	cpc	r1, r20
 752:	55 1f       	adc	r21, r21
 754:	f2 cf       	rjmp	.-28     	; 0x73a <__fp_split3+0xe>
 756:	46 95       	lsr	r20
 758:	f1 df       	rcall	.-30     	; 0x73c <__fp_splitA>
 75a:	08 c0       	rjmp	.+16     	; 0x76c <__fp_splitA+0x30>
 75c:	16 16       	cp	r1, r22
 75e:	17 06       	cpc	r1, r23
 760:	18 06       	cpc	r1, r24
 762:	99 1f       	adc	r25, r25
 764:	f1 cf       	rjmp	.-30     	; 0x748 <__fp_splitA+0xc>
 766:	86 95       	lsr	r24
 768:	71 05       	cpc	r23, r1
 76a:	61 05       	cpc	r22, r1
 76c:	08 94       	sec
 76e:	08 95       	ret

00000770 <__fp_zero>:
 770:	e8 94       	clt

00000772 <__fp_szero>:
 772:	bb 27       	eor	r27, r27
 774:	66 27       	eor	r22, r22
 776:	77 27       	eor	r23, r23
 778:	cb 01       	movw	r24, r22
 77a:	97 f9       	bld	r25, 7
 77c:	08 95       	ret

0000077e <__mulsf3>:
 77e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__mulsf3x>
 782:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_round>
 786:	0e 94 77 03 	call	0x6ee	; 0x6ee <__fp_pscA>
 78a:	38 f0       	brcs	.+14     	; 0x79a <__mulsf3+0x1c>
 78c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__fp_pscB>
 790:	20 f0       	brcs	.+8      	; 0x79a <__mulsf3+0x1c>
 792:	95 23       	and	r25, r21
 794:	11 f0       	breq	.+4      	; 0x79a <__mulsf3+0x1c>
 796:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_inf>
 79a:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__fp_nan>
 79e:	11 24       	eor	r1, r1
 7a0:	0c 94 b9 03 	jmp	0x772	; 0x772 <__fp_szero>

000007a4 <__mulsf3x>:
 7a4:	0e 94 96 03 	call	0x72c	; 0x72c <__fp_split3>
 7a8:	70 f3       	brcs	.-36     	; 0x786 <__mulsf3+0x8>

000007aa <__mulsf3_pse>:
 7aa:	95 9f       	mul	r25, r21
 7ac:	c1 f3       	breq	.-16     	; 0x79e <__mulsf3+0x20>
 7ae:	95 0f       	add	r25, r21
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	55 1f       	adc	r21, r21
 7b4:	62 9f       	mul	r22, r18
 7b6:	f0 01       	movw	r30, r0
 7b8:	72 9f       	mul	r23, r18
 7ba:	bb 27       	eor	r27, r27
 7bc:	f0 0d       	add	r31, r0
 7be:	b1 1d       	adc	r27, r1
 7c0:	63 9f       	mul	r22, r19
 7c2:	aa 27       	eor	r26, r26
 7c4:	f0 0d       	add	r31, r0
 7c6:	b1 1d       	adc	r27, r1
 7c8:	aa 1f       	adc	r26, r26
 7ca:	64 9f       	mul	r22, r20
 7cc:	66 27       	eor	r22, r22
 7ce:	b0 0d       	add	r27, r0
 7d0:	a1 1d       	adc	r26, r1
 7d2:	66 1f       	adc	r22, r22
 7d4:	82 9f       	mul	r24, r18
 7d6:	22 27       	eor	r18, r18
 7d8:	b0 0d       	add	r27, r0
 7da:	a1 1d       	adc	r26, r1
 7dc:	62 1f       	adc	r22, r18
 7de:	73 9f       	mul	r23, r19
 7e0:	b0 0d       	add	r27, r0
 7e2:	a1 1d       	adc	r26, r1
 7e4:	62 1f       	adc	r22, r18
 7e6:	83 9f       	mul	r24, r19
 7e8:	a0 0d       	add	r26, r0
 7ea:	61 1d       	adc	r22, r1
 7ec:	22 1f       	adc	r18, r18
 7ee:	74 9f       	mul	r23, r20
 7f0:	33 27       	eor	r19, r19
 7f2:	a0 0d       	add	r26, r0
 7f4:	61 1d       	adc	r22, r1
 7f6:	23 1f       	adc	r18, r19
 7f8:	84 9f       	mul	r24, r20
 7fa:	60 0d       	add	r22, r0
 7fc:	21 1d       	adc	r18, r1
 7fe:	82 2f       	mov	r24, r18
 800:	76 2f       	mov	r23, r22
 802:	6a 2f       	mov	r22, r26
 804:	11 24       	eor	r1, r1
 806:	9f 57       	subi	r25, 0x7F	; 127
 808:	50 40       	sbci	r21, 0x00	; 0
 80a:	9a f0       	brmi	.+38     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 80c:	f1 f0       	breq	.+60     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 80e:	88 23       	and	r24, r24
 810:	4a f0       	brmi	.+18     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 812:	ee 0f       	add	r30, r30
 814:	ff 1f       	adc	r31, r31
 816:	bb 1f       	adc	r27, r27
 818:	66 1f       	adc	r22, r22
 81a:	77 1f       	adc	r23, r23
 81c:	88 1f       	adc	r24, r24
 81e:	91 50       	subi	r25, 0x01	; 1
 820:	50 40       	sbci	r21, 0x00	; 0
 822:	a9 f7       	brne	.-22     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 824:	9e 3f       	cpi	r25, 0xFE	; 254
 826:	51 05       	cpc	r21, r1
 828:	80 f0       	brcs	.+32     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 82a:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_inf>
 82e:	0c 94 b9 03 	jmp	0x772	; 0x772 <__fp_szero>
 832:	5f 3f       	cpi	r21, 0xFF	; 255
 834:	e4 f3       	brlt	.-8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 836:	98 3e       	cpi	r25, 0xE8	; 232
 838:	d4 f3       	brlt	.-12     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 83a:	86 95       	lsr	r24
 83c:	77 95       	ror	r23
 83e:	67 95       	ror	r22
 840:	b7 95       	ror	r27
 842:	f7 95       	ror	r31
 844:	e7 95       	ror	r30
 846:	9f 5f       	subi	r25, 0xFF	; 255
 848:	c1 f7       	brne	.-16     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 84a:	fe 2b       	or	r31, r30
 84c:	88 0f       	add	r24, r24
 84e:	91 1d       	adc	r25, r1
 850:	96 95       	lsr	r25
 852:	87 95       	ror	r24
 854:	97 f9       	bld	r25, 7
 856:	08 95       	ret

00000858 <__umulhisi3>:
 858:	a2 9f       	mul	r26, r18
 85a:	b0 01       	movw	r22, r0
 85c:	b3 9f       	mul	r27, r19
 85e:	c0 01       	movw	r24, r0
 860:	a3 9f       	mul	r26, r19
 862:	70 0d       	add	r23, r0
 864:	81 1d       	adc	r24, r1
 866:	11 24       	eor	r1, r1
 868:	91 1d       	adc	r25, r1
 86a:	b2 9f       	mul	r27, r18
 86c:	70 0d       	add	r23, r0
 86e:	81 1d       	adc	r24, r1
 870:	11 24       	eor	r1, r1
 872:	91 1d       	adc	r25, r1
 874:	08 95       	ret

00000876 <_exit>:
 876:	f8 94       	cli

00000878 <__stop_program>:
 878:	ff cf       	rjmp	.-2      	; 0x878 <__stop_program>
