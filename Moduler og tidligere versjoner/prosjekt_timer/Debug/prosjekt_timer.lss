
prosjekt_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078f  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b9  00000000  00000000  00000963  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cf  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b5  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  000016e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001799  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_buzzer>:
#include <util/delay.h>


void init_buzzer (void)
{
	DDRB = (1<<DDB3);	// PB2 or OC1B output pin
  80:	88 e0       	ldi	r24, 0x08	; 8
  82:	84 b9       	out	0x04, r24	; 4
	TCCR2A = (1<<COM2A0)|(1<<WGM21);	// Toggle OC1B on compare match and CTC mode  with OCR1A top (mode 4)
  84:	82 e4       	ldi	r24, 0x42	; 66
  86:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);	// 1024x prescaler
  8a:	87 e0       	ldi	r24, 0x07	; 7
  8c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A =	13;	// Top value to give 1200hz freq
  90:	8d e0       	ldi	r24, 0x0D	; 13
  92:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  96:	08 95       	ret

00000098 <Buzzer>:

void Buzzer()
{

	
	for (int i = 3; i > 0; --i)
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	16 c0       	rjmp	.+44     	; 0xca <Buzzer+0x32>
	{
		DDRB = (1<<DDB3);
  9e:	28 e0       	ldi	r18, 0x08	; 8
  a0:	24 b9       	out	0x04, r18	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	33 ed       	ldi	r19, 0xD3	; 211
  a6:	40 e3       	ldi	r20, 0x30	; 48
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	30 40       	sbci	r19, 0x00	; 0
  ac:	40 40       	sbci	r20, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <Buzzer+0x10>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <Buzzer+0x1a>
  b2:	00 00       	nop
		_delay_ms(1000);
		DDRB = (0<<DDB3);
  b4:	14 b8       	out	0x04, r1	; 4
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	39 e6       	ldi	r19, 0x69	; 105
  ba:	48 e1       	ldi	r20, 0x18	; 24
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	30 40       	sbci	r19, 0x00	; 0
  c0:	40 40       	sbci	r20, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <Buzzer+0x24>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <Buzzer+0x2e>
  c6:	00 00       	nop

void Buzzer()
{

	
	for (int i = 3; i > 0; --i)
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	18 16       	cp	r1, r24
  cc:	19 06       	cpc	r1, r25
  ce:	3c f3       	brlt	.-50     	; 0x9e <Buzzer+0x6>
		DDRB = (1<<DDB3);
		_delay_ms(1000);
		DDRB = (0<<DDB3);
		_delay_ms(500);
		}
}
  d0:	08 95       	ret

000000d2 <main>:



int main(void)
{
	init_buzzer();
  d2:	0e 94 40 00 	call	0x80	; 0x80 <init_buzzer>
	Buzzer();
  d6:	0e 94 4c 00 	call	0x98	; 0x98 <Buzzer>
  da:	ff cf       	rjmp	.-2      	; 0xda <main+0x8>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
