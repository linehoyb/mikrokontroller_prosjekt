
ADC_modul_prosjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000009a4  00000a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a7c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b04  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fa  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000461  00000000  00000000  00001e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  0000228c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049e  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003cf  00000000  00000000  00002892  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002c61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  1c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  2c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_11>
  30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  38:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  40:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  58:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  5c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  60:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  68:	08 00       	.word	0x0008	; ????
  6a:	00 00       	nop
  6c:	be 92       	st	-X, r11
  6e:	24 49       	sbci	r18, 0x94	; 148
  70:	12 3e       	cpi	r17, 0xE2	; 226
  72:	ab aa       	std	Y+51, r10	; 0x33
  74:	aa 2a       	or	r10, r26
  76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
  78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
  7a:	4c 3e       	cpi	r20, 0xEC	; 236
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	be ab       	std	Y+54, r27	; 0x36
  82:	aa aa       	std	Y+50, r10	; 0x32
  84:	aa 3e       	cpi	r26, 0xEA	; 234
  86:	00 00       	nop
  88:	00 00       	nop
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 08       	sbc	r0, r0
  96:	41 78       	andi	r20, 0x81	; 129
  98:	d3 bb       	out	0x13, r29	; 19
  9a:	43 87       	std	Z+11, r20	; 0x0b
  9c:	d1 13       	cpse	r29, r17
  9e:	3d 19       	sub	r19, r13
  a0:	0e 3c       	cpi	r16, 0xCE	; 206
  a2:	c3 bd       	out	0x23, r28	; 35
  a4:	42 82       	std	Z+2, r4	; 0x02
  a6:	ad 2b       	or	r26, r29
  a8:	3e 68       	ori	r19, 0x8E	; 142
  aa:	ec 82       	std	Y+4, r14	; 0x04
  ac:	76 be       	out	0x36, r7	; 54
  ae:	d9 8f       	std	Y+25, r29	; 0x19
  b0:	e1 a9       	ldd	r30, Z+49	; 0x31
  b2:	3e 4c       	sbci	r19, 0xCE	; 206
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	ff be       	out	0x3f, r15	; 63
  b8:	01 c4       	rjmp	.+2050   	; 0x8bc <__mulsf3_pse+0x52>
  ba:	ff 7f       	andi	r31, 0xFF	; 255
  bc:	3f 00       	.word	0x003f	; ????
  be:	00 00       	nop
	...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	e4 ea       	ldi	r30, 0xA4	; 164
  d6:	f9 e0       	ldi	r31, 0x09	; 9
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a2 33       	cpi	r26, 0x32	; 50
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>
  e4:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
  e8:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <_exit>

000000ec <__bad_interrupt>:
  ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <ADC_init>:

uint8_t time_test = 180; // Test-variable to see if timer working

void ADC_init(void)
{
	ADMUX |= (1<<REFS0); // VCC as voltage reference
  f0:	ec e7       	ldi	r30, 0x7C	; 124
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2); //Enables ADC feature, prescaler = 128 --> ADCfreq = 125kHz
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	87 68       	ori	r24, 0x87	; 135
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <USART_init>:
	// (Selecting prescaler: freq. needed: 50kHz - 200kHz. CLKfreq: 16MHz)
}

void USART_init(void)
{
	UBRR0 = BAUD_PRESCALE; // Sets UBBR according to system clock and desired baudrate
 106:	87 e6       	ldi	r24, 0x67	; 103
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 10e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0); // Turn on the transmission and reception circuitry
 112:	88 e1       	ldi	r24, 0x18	; 24
 114:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 118:	08 95       	ret

0000011a <timer_init>:
}

void timer_init(void)
{
	/*An interrupt happens every 1s*/
	OCR1A = 0x3D08;
 11a:	88 e0       	ldi	r24, 0x08	; 8
 11c:	9d e3       	ldi	r25, 0x3D	; 61
 11e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 122:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	TCCR1B |= (1 << WGM12);	// Mode 4, CTC on OCR1A
 126:	e1 e8       	ldi	r30, 0x81	; 129
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); 	//Set interrupt on compare match
 130:	af e6       	ldi	r26, 0x6F	; 111
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	8c 91       	ld	r24, X
 136:	82 60       	ori	r24, 0x02	; 2
 138:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS12) | (1 << CS10); // set prescaler to 1024 and start the timer
 13a:	80 81       	ld	r24, Z
 13c:	85 60       	ori	r24, 0x05	; 5
 13e:	80 83       	st	Z, r24
	
	sei(); // enable interrupts
 140:	78 94       	sei
 142:	08 95       	ret

00000144 <transmitByte>:
}

void transmitByte(uint8_t data)
{
	/* Wait for empty transmit buffer */
	loop_until_bit_is_set(UCSR0A, UDRE0);
 144:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 148:	95 ff       	sbrs	r25, 5
 14a:	fc cf       	rjmp	.-8      	; 0x144 <transmitByte>
	UDR0 = data;                                            /* send data */
 14c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 150:	08 95       	ret

00000152 <printString>:
}

void printString(const char myString[]) 
{
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 15a:	c0 e0       	ldi	r28, 0x00	; 0
	while (myString[i]) {
 15c:	03 c0       	rjmp	.+6      	; 0x164 <printString+0x12>
		transmitByte(myString[i]);
 15e:	0e 94 a2 00 	call	0x144	; 0x144 <transmitByte>
		i++;
 162:	cf 5f       	subi	r28, 0xFF	; 255
}

void printString(const char myString[]) 
{
	uint8_t i = 0;
	while (myString[i]) {
 164:	f8 01       	movw	r30, r16
 166:	ec 0f       	add	r30, r28
 168:	f1 1d       	adc	r31, r1
 16a:	80 81       	ld	r24, Z
 16c:	81 11       	cpse	r24, r1
 16e:	f7 cf       	rjmp	.-18     	; 0x15e <printString+0xc>
		transmitByte(myString[i]);
		i++;
	}
}
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <read_ADC>:

uint16_t read_ADC(uint8_t ADCchannel)
{
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F); //select ADC channel with safety mask
 178:	ec e7       	ldi	r30, 0x7C	; 124
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	90 81       	ld	r25, Z
 17e:	90 7f       	andi	r25, 0xF0	; 240
 180:	8f 70       	andi	r24, 0x0F	; 15
 182:	89 2b       	or	r24, r25
 184:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //single conversion mode
 186:	ea e7       	ldi	r30, 0x7A	; 122
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	80 64       	ori	r24, 0x40	; 64
 18e:	80 83       	st	Z, r24

	while( ADCSRA & (1<<ADSC) ); // wait until ADC conversion is complete
 190:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 194:	86 fd       	sbrc	r24, 6
 196:	fc cf       	rjmp	.-8      	; 0x190 <read_ADC+0x18>
	return ADC;
 198:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 19c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 1a0:	08 95       	ret

000001a2 <print_value>:

void print_value(uint16_t number)
{
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	8c 01       	movw	r16, r24
	/*
	* Prints 3-digit numbers to the terminal
	* Because the terminal is interpeting these values as an ASCI code we add '0', or 48, plus a digit
	*/
	transmitByte('0' + ((number/ 100) % 10)); // Hundreds
 1ac:	9c 01       	movw	r18, r24
 1ae:	36 95       	lsr	r19
 1b0:	27 95       	ror	r18
 1b2:	36 95       	lsr	r19
 1b4:	27 95       	ror	r18
 1b6:	ab e7       	ldi	r26, 0x7B	; 123
 1b8:	b4 e1       	ldi	r27, 0x14	; 20
 1ba:	0e 94 c1 04 	call	0x982	; 0x982 <__umulhisi3>
 1be:	ac 01       	movw	r20, r24
 1c0:	56 95       	lsr	r21
 1c2:	47 95       	ror	r20
 1c4:	9a 01       	movw	r18, r20
 1c6:	ad ec       	ldi	r26, 0xCD	; 205
 1c8:	bc ec       	ldi	r27, 0xCC	; 204
 1ca:	0e 94 c1 04 	call	0x982	; 0x982 <__umulhisi3>
 1ce:	96 95       	lsr	r25
 1d0:	87 95       	ror	r24
 1d2:	96 95       	lsr	r25
 1d4:	87 95       	ror	r24
 1d6:	96 95       	lsr	r25
 1d8:	87 95       	ror	r24
 1da:	9c 01       	movw	r18, r24
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	82 0f       	add	r24, r18
 1ee:	93 1f       	adc	r25, r19
 1f0:	9a 01       	movw	r18, r20
 1f2:	28 1b       	sub	r18, r24
 1f4:	39 0b       	sbc	r19, r25
 1f6:	c9 01       	movw	r24, r18
 1f8:	80 5d       	subi	r24, 0xD0	; 208
 1fa:	0e 94 a2 00 	call	0x144	; 0x144 <transmitByte>
	transmitByte('0' + ((number/ 10) % 10)); // Tens
 1fe:	98 01       	movw	r18, r16
 200:	ad ec       	ldi	r26, 0xCD	; 205
 202:	bc ec       	ldi	r27, 0xCC	; 204
 204:	0e 94 c1 04 	call	0x982	; 0x982 <__umulhisi3>
 208:	ec 01       	movw	r28, r24
 20a:	d6 95       	lsr	r29
 20c:	c7 95       	ror	r28
 20e:	d6 95       	lsr	r29
 210:	c7 95       	ror	r28
 212:	d6 95       	lsr	r29
 214:	c7 95       	ror	r28
 216:	9e 01       	movw	r18, r28
 218:	0e 94 c1 04 	call	0x982	; 0x982 <__umulhisi3>
 21c:	96 95       	lsr	r25
 21e:	87 95       	ror	r24
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	96 95       	lsr	r25
 226:	87 95       	ror	r24
 228:	9c 01       	movw	r18, r24
 22a:	22 0f       	add	r18, r18
 22c:	33 1f       	adc	r19, r19
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	82 0f       	add	r24, r18
 23c:	93 1f       	adc	r25, r19
 23e:	9e 01       	movw	r18, r28
 240:	28 1b       	sub	r18, r24
 242:	39 0b       	sbc	r19, r25
 244:	c9 01       	movw	r24, r18
 246:	80 5d       	subi	r24, 0xD0	; 208
 248:	0e 94 a2 00 	call	0x144	; 0x144 <transmitByte>
	transmitByte('0' + (number % 10)); // Ones
 24c:	ce 01       	movw	r24, r28
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	cc 0f       	add	r28, r28
 254:	dd 1f       	adc	r29, r29
 256:	cc 0f       	add	r28, r28
 258:	dd 1f       	adc	r29, r29
 25a:	cc 0f       	add	r28, r28
 25c:	dd 1f       	adc	r29, r29
 25e:	c8 0f       	add	r28, r24
 260:	d9 1f       	adc	r29, r25
 262:	c8 01       	movw	r24, r16
 264:	8c 1b       	sub	r24, r28
 266:	9d 0b       	sbc	r25, r29
 268:	80 5d       	subi	r24, 0xD0	; 208
 26a:	0e 94 a2 00 	call	0x144	; 0x144 <transmitByte>
	printString("\r");
 26e:	83 e2       	ldi	r24, 0x23	; 35
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 a9 00 	call	0x152	; 0x152 <printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 276:	3f ef       	ldi	r19, 0xFF	; 255
 278:	80 e7       	ldi	r24, 0x70	; 112
 27a:	92 e0       	ldi	r25, 0x02	; 2
 27c:	31 50       	subi	r19, 0x01	; 1
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <print_value+0xda>
 284:	00 c0       	rjmp	.+0      	; 0x286 <print_value+0xe4>
 286:	00 00       	nop
	_delay_ms(50);
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	08 95       	ret

00000292 <ADC_to_seconds>:

float ADC_to_seconds(uint16_t adc_number)
{
	/*Returns the timer value in seconds*/
	const float MAX_SECONDS = 180;
	return ((float)adc_number/1023)*MAX_SECONDS;
 292:	bc 01       	movw	r22, r24
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 41 03 	call	0x682	; 0x682 <__floatunsisf>
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 ec       	ldi	r19, 0xC0	; 192
 2a0:	4f e7       	ldi	r20, 0x7F	; 127
 2a2:	54 e4       	ldi	r21, 0x44	; 68
 2a4:	0e 94 a0 02 	call	0x540	; 0x540 <__divsf3>
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	44 e3       	ldi	r20, 0x34	; 52
 2ae:	53 e4       	ldi	r21, 0x43	; 67
 2b0:	0e 94 1f 04 	call	0x83e	; 0x83e <__mulsf3>
}
 2b4:	08 95       	ret

000002b6 <ADC_to_celcius>:

float ADC_to_celcius(uint16_t adc_number)
{
 2b6:	8f 92       	push	r8
 2b8:	9f 92       	push	r9
 2ba:	af 92       	push	r10
 2bc:	bf 92       	push	r11
 2be:	cf 92       	push	r12
 2c0:	df 92       	push	r13
 2c2:	ef 92       	push	r14
 2c4:	ff 92       	push	r15
	const float R_25 = 10000; // ref. resistance thermistor
	const float BETA = 3950; // material constant
	const float ADC_MAX = 1023; 
	const float VCC = 5.0;
	
	float V_0 = ((float)adc_number*VCC) / ADC_MAX; // voltage over thermistor
 2c6:	bc 01       	movw	r22, r24
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 41 03 	call	0x682	; 0x682 <__floatunsisf>
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	40 ea       	ldi	r20, 0xA0	; 160
 2d6:	50 e4       	ldi	r21, 0x40	; 64
 2d8:	0e 94 1f 04 	call	0x83e	; 0x83e <__mulsf3>
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 ec       	ldi	r19, 0xC0	; 192
 2e0:	4f e7       	ldi	r20, 0x7F	; 127
 2e2:	54 e4       	ldi	r21, 0x44	; 68
 2e4:	0e 94 a0 02 	call	0x540	; 0x540 <__divsf3>
 2e8:	6b 01       	movw	r12, r22
 2ea:	7c 01       	movw	r14, r24
	float R_0 = V_0*R_25 / (VCC-V_0); // thermistor resistance
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	30 e4       	ldi	r19, 0x40	; 64
 2f0:	4c e1       	ldi	r20, 0x1C	; 28
 2f2:	56 e4       	ldi	r21, 0x46	; 70
 2f4:	0e 94 1f 04 	call	0x83e	; 0x83e <__mulsf3>
 2f8:	4b 01       	movw	r8, r22
 2fa:	5c 01       	movw	r10, r24
 2fc:	a7 01       	movw	r20, r14
 2fe:	96 01       	movw	r18, r12
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	80 ea       	ldi	r24, 0xA0	; 160
 306:	90 e4       	ldi	r25, 0x40	; 64
 308:	0e 94 33 02 	call	0x466	; 0x466 <__subsf3>
 30c:	9b 01       	movw	r18, r22
 30e:	ac 01       	movw	r20, r24
 310:	c5 01       	movw	r24, r10
 312:	b4 01       	movw	r22, r8
 314:	0e 94 a0 02 	call	0x540	; 0x540 <__divsf3>
	float celcius = (1 / ((1/T_25) + (1/BETA)*log(R_0 / R_25))) - 273.15;
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e4       	ldi	r19, 0x40	; 64
 31c:	4c e1       	ldi	r20, 0x1C	; 28
 31e:	56 e4       	ldi	r21, 0x46	; 70
 320:	0e 94 a0 02 	call	0x540	; 0x540 <__divsf3>
 324:	0e 94 d7 03 	call	0x7ae	; 0x7ae <log>
 328:	2c e2       	ldi	r18, 0x2C	; 44
 32a:	3b eb       	ldi	r19, 0xBB	; 187
 32c:	44 e8       	ldi	r20, 0x84	; 132
 32e:	59 e3       	ldi	r21, 0x39	; 57
 330:	0e 94 1f 04 	call	0x83e	; 0x83e <__mulsf3>
 334:	2f e0       	ldi	r18, 0x0F	; 15
 336:	3f ec       	ldi	r19, 0xCF	; 207
 338:	4b e5       	ldi	r20, 0x5B	; 91
 33a:	5b e3       	ldi	r21, 0x3B	; 59
 33c:	0e 94 34 02 	call	0x468	; 0x468 <__addsf3>
 340:	9b 01       	movw	r18, r22
 342:	ac 01       	movw	r20, r24
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	80 e8       	ldi	r24, 0x80	; 128
 34a:	9f e3       	ldi	r25, 0x3F	; 63
 34c:	0e 94 a0 02 	call	0x540	; 0x540 <__divsf3>
 350:	23 e3       	ldi	r18, 0x33	; 51
 352:	33 e9       	ldi	r19, 0x93	; 147
 354:	48 e8       	ldi	r20, 0x88	; 136
 356:	53 e4       	ldi	r21, 0x43	; 67
 358:	0e 94 33 02 	call	0x466	; 0x466 <__subsf3>
	return celcius;
}
 35c:	ff 90       	pop	r15
 35e:	ef 90       	pop	r14
 360:	df 90       	pop	r13
 362:	cf 90       	pop	r12
 364:	bf 90       	pop	r11
 366:	af 90       	pop	r10
 368:	9f 90       	pop	r9
 36a:	8f 90       	pop	r8
 36c:	08 95       	ret

0000036e <main>:

int main(void)
{	
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	00 d0       	rcall	.+0      	; 0x374 <main+0x6>
 374:	00 d0       	rcall	.+0      	; 0x376 <main+0x8>
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
	ADC_init();
 37a:	0e 94 78 00 	call	0xf0	; 0xf0 <ADC_init>
	USART_init();
 37e:	0e 94 83 00 	call	0x106	; 0x106 <USART_init>
	timer_init();
 382:	0e 94 8d 00 	call	0x11a	; 0x11a <timer_init>
	
	while (1)
	{
		volatile uint16_t thermistor_value = read_ADC(THERM_PIN);
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0e 94 bc 00 	call	0x178	; 0x178 <read_ADC>
 38c:	9c 83       	std	Y+4, r25	; 0x04
 38e:	8b 83       	std	Y+3, r24	; 0x03
		float temperature = ADC_to_celcius(thermistor_value);
 390:	8b 81       	ldd	r24, Y+3	; 0x03
 392:	9c 81       	ldd	r25, Y+4	; 0x04
 394:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <ADC_to_celcius>
 398:	6b 01       	movw	r12, r22
 39a:	7c 01       	movw	r14, r24
		printString("Temperature: ");
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 a9 00 	call	0x152	; 0x152 <printString>
		print_value(temperature);
 3a4:	c7 01       	movw	r24, r14
 3a6:	b6 01       	movw	r22, r12
 3a8:	0e 94 12 03 	call	0x624	; 0x624 <__fixunssfsi>
 3ac:	cb 01       	movw	r24, r22
 3ae:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <print_value>
		
		volatile uint16_t pot_value = read_ADC(POT_PIN);
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 bc 00 	call	0x178	; 0x178 <read_ADC>
 3b8:	9a 83       	std	Y+2, r25	; 0x02
 3ba:	89 83       	std	Y+1, r24	; 0x01
		float seconds = ADC_to_seconds(pot_value);
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	9a 81       	ldd	r25, Y+2	; 0x02
 3c0:	0e 94 49 01 	call	0x292	; 0x292 <ADC_to_seconds>
 3c4:	6b 01       	movw	r12, r22
 3c6:	7c 01       	movw	r14, r24
		printString("Set time at: ");
 3c8:	8f e0       	ldi	r24, 0x0F	; 15
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	0e 94 a9 00 	call	0x152	; 0x152 <printString>
		print_value(seconds);
 3d0:	c7 01       	movw	r24, r14
 3d2:	b6 01       	movw	r22, r12
 3d4:	0e 94 12 03 	call	0x624	; 0x624 <__fixunssfsi>
 3d8:	cb 01       	movw	r24, r22
 3da:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <print_value>
		
		printString("------\r");
 3de:	8d e1       	ldi	r24, 0x1D	; 29
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	0e 94 a9 00 	call	0x152	; 0x152 <printString>
 3e6:	2f ef       	ldi	r18, 0xFF	; 255
 3e8:	83 ed       	ldi	r24, 0xD3	; 211
 3ea:	90 e3       	ldi	r25, 0x30	; 48
 3ec:	21 50       	subi	r18, 0x01	; 1
 3ee:	80 40       	sbci	r24, 0x00	; 0
 3f0:	90 40       	sbci	r25, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <main+0x7e>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <main+0x88>
 3f6:	00 00       	nop
 3f8:	c6 cf       	rjmp	.-116    	; 0x386 <main+0x18>

000003fa <__vector_11>:
	}
	//	return 0;
}

ISR (TIMER1_COMPA_vect) // action to be done every 1 sec
{
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	2f 93       	push	r18
 406:	3f 93       	push	r19
 408:	4f 93       	push	r20
 40a:	5f 93       	push	r21
 40c:	6f 93       	push	r22
 40e:	7f 93       	push	r23
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	af 93       	push	r26
 416:	bf 93       	push	r27
 418:	ef 93       	push	r30
 41a:	ff 93       	push	r31
	if (time_test == 0) time_test = 180; // resets timer (just for testing)
 41c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 420:	81 11       	cpse	r24, r1
 422:	04 c0       	rjmp	.+8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 424:	84 eb       	ldi	r24, 0xB4	; 180
 426:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 42a:	03 c0       	rjmp	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
	else time_test--; // Subtracts 1 from the timer value
 42c:	81 50       	subi	r24, 0x01	; 1
 42e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	printString("Time left: ");
 432:	85 e2       	ldi	r24, 0x25	; 37
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	0e 94 a9 00 	call	0x152	; 0x152 <printString>
	print_value(time_test);
 43a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <print_value>
 444:	ff 91       	pop	r31
 446:	ef 91       	pop	r30
 448:	bf 91       	pop	r27
 44a:	af 91       	pop	r26
 44c:	9f 91       	pop	r25
 44e:	8f 91       	pop	r24
 450:	7f 91       	pop	r23
 452:	6f 91       	pop	r22
 454:	5f 91       	pop	r21
 456:	4f 91       	pop	r20
 458:	3f 91       	pop	r19
 45a:	2f 91       	pop	r18
 45c:	0f 90       	pop	r0
 45e:	0f be       	out	0x3f, r0	; 63
 460:	0f 90       	pop	r0
 462:	1f 90       	pop	r1
 464:	18 95       	reti

00000466 <__subsf3>:
 466:	50 58       	subi	r21, 0x80	; 128

00000468 <__addsf3>:
 468:	bb 27       	eor	r27, r27
 46a:	aa 27       	eor	r26, r26
 46c:	0e 94 4b 02 	call	0x496	; 0x496 <__addsf3x>
 470:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_round>
 474:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_pscA>
 478:	38 f0       	brcs	.+14     	; 0x488 <__addsf3+0x20>
 47a:	0e 94 8e 03 	call	0x71c	; 0x71c <__fp_pscB>
 47e:	20 f0       	brcs	.+8      	; 0x488 <__addsf3+0x20>
 480:	39 f4       	brne	.+14     	; 0x490 <__addsf3+0x28>
 482:	9f 3f       	cpi	r25, 0xFF	; 255
 484:	19 f4       	brne	.+6      	; 0x48c <__addsf3+0x24>
 486:	26 f4       	brtc	.+8      	; 0x490 <__addsf3+0x28>
 488:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_nan>
 48c:	0e f4       	brtc	.+2      	; 0x490 <__addsf3+0x28>
 48e:	e0 95       	com	r30
 490:	e7 fb       	bst	r30, 7
 492:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__fp_inf>

00000496 <__addsf3x>:
 496:	e9 2f       	mov	r30, r25
 498:	0e 94 a6 03 	call	0x74c	; 0x74c <__fp_split3>
 49c:	58 f3       	brcs	.-42     	; 0x474 <__addsf3+0xc>
 49e:	ba 17       	cp	r27, r26
 4a0:	62 07       	cpc	r22, r18
 4a2:	73 07       	cpc	r23, r19
 4a4:	84 07       	cpc	r24, r20
 4a6:	95 07       	cpc	r25, r21
 4a8:	20 f0       	brcs	.+8      	; 0x4b2 <__addsf3x+0x1c>
 4aa:	79 f4       	brne	.+30     	; 0x4ca <__addsf3x+0x34>
 4ac:	a6 f5       	brtc	.+104    	; 0x516 <__addsf3x+0x80>
 4ae:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_zero>
 4b2:	0e f4       	brtc	.+2      	; 0x4b6 <__addsf3x+0x20>
 4b4:	e0 95       	com	r30
 4b6:	0b 2e       	mov	r0, r27
 4b8:	ba 2f       	mov	r27, r26
 4ba:	a0 2d       	mov	r26, r0
 4bc:	0b 01       	movw	r0, r22
 4be:	b9 01       	movw	r22, r18
 4c0:	90 01       	movw	r18, r0
 4c2:	0c 01       	movw	r0, r24
 4c4:	ca 01       	movw	r24, r20
 4c6:	a0 01       	movw	r20, r0
 4c8:	11 24       	eor	r1, r1
 4ca:	ff 27       	eor	r31, r31
 4cc:	59 1b       	sub	r21, r25
 4ce:	99 f0       	breq	.+38     	; 0x4f6 <__addsf3x+0x60>
 4d0:	59 3f       	cpi	r21, 0xF9	; 249
 4d2:	50 f4       	brcc	.+20     	; 0x4e8 <__addsf3x+0x52>
 4d4:	50 3e       	cpi	r21, 0xE0	; 224
 4d6:	68 f1       	brcs	.+90     	; 0x532 <__addsf3x+0x9c>
 4d8:	1a 16       	cp	r1, r26
 4da:	f0 40       	sbci	r31, 0x00	; 0
 4dc:	a2 2f       	mov	r26, r18
 4de:	23 2f       	mov	r18, r19
 4e0:	34 2f       	mov	r19, r20
 4e2:	44 27       	eor	r20, r20
 4e4:	58 5f       	subi	r21, 0xF8	; 248
 4e6:	f3 cf       	rjmp	.-26     	; 0x4ce <__addsf3x+0x38>
 4e8:	46 95       	lsr	r20
 4ea:	37 95       	ror	r19
 4ec:	27 95       	ror	r18
 4ee:	a7 95       	ror	r26
 4f0:	f0 40       	sbci	r31, 0x00	; 0
 4f2:	53 95       	inc	r21
 4f4:	c9 f7       	brne	.-14     	; 0x4e8 <__addsf3x+0x52>
 4f6:	7e f4       	brtc	.+30     	; 0x516 <__addsf3x+0x80>
 4f8:	1f 16       	cp	r1, r31
 4fa:	ba 0b       	sbc	r27, r26
 4fc:	62 0b       	sbc	r22, r18
 4fe:	73 0b       	sbc	r23, r19
 500:	84 0b       	sbc	r24, r20
 502:	ba f0       	brmi	.+46     	; 0x532 <__addsf3x+0x9c>
 504:	91 50       	subi	r25, 0x01	; 1
 506:	a1 f0       	breq	.+40     	; 0x530 <__addsf3x+0x9a>
 508:	ff 0f       	add	r31, r31
 50a:	bb 1f       	adc	r27, r27
 50c:	66 1f       	adc	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	88 1f       	adc	r24, r24
 512:	c2 f7       	brpl	.-16     	; 0x504 <__addsf3x+0x6e>
 514:	0e c0       	rjmp	.+28     	; 0x532 <__addsf3x+0x9c>
 516:	ba 0f       	add	r27, r26
 518:	62 1f       	adc	r22, r18
 51a:	73 1f       	adc	r23, r19
 51c:	84 1f       	adc	r24, r20
 51e:	48 f4       	brcc	.+18     	; 0x532 <__addsf3x+0x9c>
 520:	87 95       	ror	r24
 522:	77 95       	ror	r23
 524:	67 95       	ror	r22
 526:	b7 95       	ror	r27
 528:	f7 95       	ror	r31
 52a:	9e 3f       	cpi	r25, 0xFE	; 254
 52c:	08 f0       	brcs	.+2      	; 0x530 <__addsf3x+0x9a>
 52e:	b0 cf       	rjmp	.-160    	; 0x490 <__addsf3+0x28>
 530:	93 95       	inc	r25
 532:	88 0f       	add	r24, r24
 534:	08 f0       	brcs	.+2      	; 0x538 <__addsf3x+0xa2>
 536:	99 27       	eor	r25, r25
 538:	ee 0f       	add	r30, r30
 53a:	97 95       	ror	r25
 53c:	87 95       	ror	r24
 53e:	08 95       	ret

00000540 <__divsf3>:
 540:	0e 94 b4 02 	call	0x568	; 0x568 <__divsf3x>
 544:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_round>
 548:	0e 94 8e 03 	call	0x71c	; 0x71c <__fp_pscB>
 54c:	58 f0       	brcs	.+22     	; 0x564 <__divsf3+0x24>
 54e:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_pscA>
 552:	40 f0       	brcs	.+16     	; 0x564 <__divsf3+0x24>
 554:	29 f4       	brne	.+10     	; 0x560 <__divsf3+0x20>
 556:	5f 3f       	cpi	r21, 0xFF	; 255
 558:	29 f0       	breq	.+10     	; 0x564 <__divsf3+0x24>
 55a:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__fp_inf>
 55e:	51 11       	cpse	r21, r1
 560:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_szero>
 564:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_nan>

00000568 <__divsf3x>:
 568:	0e 94 a6 03 	call	0x74c	; 0x74c <__fp_split3>
 56c:	68 f3       	brcs	.-38     	; 0x548 <__divsf3+0x8>

0000056e <__divsf3_pse>:
 56e:	99 23       	and	r25, r25
 570:	b1 f3       	breq	.-20     	; 0x55e <__divsf3+0x1e>
 572:	55 23       	and	r21, r21
 574:	91 f3       	breq	.-28     	; 0x55a <__divsf3+0x1a>
 576:	95 1b       	sub	r25, r21
 578:	55 0b       	sbc	r21, r21
 57a:	bb 27       	eor	r27, r27
 57c:	aa 27       	eor	r26, r26
 57e:	62 17       	cp	r22, r18
 580:	73 07       	cpc	r23, r19
 582:	84 07       	cpc	r24, r20
 584:	38 f0       	brcs	.+14     	; 0x594 <__divsf3_pse+0x26>
 586:	9f 5f       	subi	r25, 0xFF	; 255
 588:	5f 4f       	sbci	r21, 0xFF	; 255
 58a:	22 0f       	add	r18, r18
 58c:	33 1f       	adc	r19, r19
 58e:	44 1f       	adc	r20, r20
 590:	aa 1f       	adc	r26, r26
 592:	a9 f3       	breq	.-22     	; 0x57e <__divsf3_pse+0x10>
 594:	35 d0       	rcall	.+106    	; 0x600 <__divsf3_pse+0x92>
 596:	0e 2e       	mov	r0, r30
 598:	3a f0       	brmi	.+14     	; 0x5a8 <__divsf3_pse+0x3a>
 59a:	e0 e8       	ldi	r30, 0x80	; 128
 59c:	32 d0       	rcall	.+100    	; 0x602 <__divsf3_pse+0x94>
 59e:	91 50       	subi	r25, 0x01	; 1
 5a0:	50 40       	sbci	r21, 0x00	; 0
 5a2:	e6 95       	lsr	r30
 5a4:	00 1c       	adc	r0, r0
 5a6:	ca f7       	brpl	.-14     	; 0x59a <__divsf3_pse+0x2c>
 5a8:	2b d0       	rcall	.+86     	; 0x600 <__divsf3_pse+0x92>
 5aa:	fe 2f       	mov	r31, r30
 5ac:	29 d0       	rcall	.+82     	; 0x600 <__divsf3_pse+0x92>
 5ae:	66 0f       	add	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	88 1f       	adc	r24, r24
 5b4:	bb 1f       	adc	r27, r27
 5b6:	26 17       	cp	r18, r22
 5b8:	37 07       	cpc	r19, r23
 5ba:	48 07       	cpc	r20, r24
 5bc:	ab 07       	cpc	r26, r27
 5be:	b0 e8       	ldi	r27, 0x80	; 128
 5c0:	09 f0       	breq	.+2      	; 0x5c4 <__divsf3_pse+0x56>
 5c2:	bb 0b       	sbc	r27, r27
 5c4:	80 2d       	mov	r24, r0
 5c6:	bf 01       	movw	r22, r30
 5c8:	ff 27       	eor	r31, r31
 5ca:	93 58       	subi	r25, 0x83	; 131
 5cc:	5f 4f       	sbci	r21, 0xFF	; 255
 5ce:	3a f0       	brmi	.+14     	; 0x5de <__divsf3_pse+0x70>
 5d0:	9e 3f       	cpi	r25, 0xFE	; 254
 5d2:	51 05       	cpc	r21, r1
 5d4:	78 f0       	brcs	.+30     	; 0x5f4 <__divsf3_pse+0x86>
 5d6:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__fp_inf>
 5da:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_szero>
 5de:	5f 3f       	cpi	r21, 0xFF	; 255
 5e0:	e4 f3       	brlt	.-8      	; 0x5da <__divsf3_pse+0x6c>
 5e2:	98 3e       	cpi	r25, 0xE8	; 232
 5e4:	d4 f3       	brlt	.-12     	; 0x5da <__divsf3_pse+0x6c>
 5e6:	86 95       	lsr	r24
 5e8:	77 95       	ror	r23
 5ea:	67 95       	ror	r22
 5ec:	b7 95       	ror	r27
 5ee:	f7 95       	ror	r31
 5f0:	9f 5f       	subi	r25, 0xFF	; 255
 5f2:	c9 f7       	brne	.-14     	; 0x5e6 <__divsf3_pse+0x78>
 5f4:	88 0f       	add	r24, r24
 5f6:	91 1d       	adc	r25, r1
 5f8:	96 95       	lsr	r25
 5fa:	87 95       	ror	r24
 5fc:	97 f9       	bld	r25, 7
 5fe:	08 95       	ret
 600:	e1 e0       	ldi	r30, 0x01	; 1
 602:	66 0f       	add	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	88 1f       	adc	r24, r24
 608:	bb 1f       	adc	r27, r27
 60a:	62 17       	cp	r22, r18
 60c:	73 07       	cpc	r23, r19
 60e:	84 07       	cpc	r24, r20
 610:	ba 07       	cpc	r27, r26
 612:	20 f0       	brcs	.+8      	; 0x61c <__divsf3_pse+0xae>
 614:	62 1b       	sub	r22, r18
 616:	73 0b       	sbc	r23, r19
 618:	84 0b       	sbc	r24, r20
 61a:	ba 0b       	sbc	r27, r26
 61c:	ee 1f       	adc	r30, r30
 61e:	88 f7       	brcc	.-30     	; 0x602 <__divsf3_pse+0x94>
 620:	e0 95       	com	r30
 622:	08 95       	ret

00000624 <__fixunssfsi>:
 624:	0e 94 ae 03 	call	0x75c	; 0x75c <__fp_splitA>
 628:	88 f0       	brcs	.+34     	; 0x64c <__fixunssfsi+0x28>
 62a:	9f 57       	subi	r25, 0x7F	; 127
 62c:	98 f0       	brcs	.+38     	; 0x654 <__fixunssfsi+0x30>
 62e:	b9 2f       	mov	r27, r25
 630:	99 27       	eor	r25, r25
 632:	b7 51       	subi	r27, 0x17	; 23
 634:	b0 f0       	brcs	.+44     	; 0x662 <__fixunssfsi+0x3e>
 636:	e1 f0       	breq	.+56     	; 0x670 <__fixunssfsi+0x4c>
 638:	66 0f       	add	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	88 1f       	adc	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	1a f0       	brmi	.+6      	; 0x648 <__fixunssfsi+0x24>
 642:	ba 95       	dec	r27
 644:	c9 f7       	brne	.-14     	; 0x638 <__fixunssfsi+0x14>
 646:	14 c0       	rjmp	.+40     	; 0x670 <__fixunssfsi+0x4c>
 648:	b1 30       	cpi	r27, 0x01	; 1
 64a:	91 f0       	breq	.+36     	; 0x670 <__fixunssfsi+0x4c>
 64c:	0e 94 c8 03 	call	0x790	; 0x790 <__fp_zero>
 650:	b1 e0       	ldi	r27, 0x01	; 1
 652:	08 95       	ret
 654:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_zero>
 658:	67 2f       	mov	r22, r23
 65a:	78 2f       	mov	r23, r24
 65c:	88 27       	eor	r24, r24
 65e:	b8 5f       	subi	r27, 0xF8	; 248
 660:	39 f0       	breq	.+14     	; 0x670 <__fixunssfsi+0x4c>
 662:	b9 3f       	cpi	r27, 0xF9	; 249
 664:	cc f3       	brlt	.-14     	; 0x658 <__fixunssfsi+0x34>
 666:	86 95       	lsr	r24
 668:	77 95       	ror	r23
 66a:	67 95       	ror	r22
 66c:	b3 95       	inc	r27
 66e:	d9 f7       	brne	.-10     	; 0x666 <__fixunssfsi+0x42>
 670:	3e f4       	brtc	.+14     	; 0x680 <__fixunssfsi+0x5c>
 672:	90 95       	com	r25
 674:	80 95       	com	r24
 676:	70 95       	com	r23
 678:	61 95       	neg	r22
 67a:	7f 4f       	sbci	r23, 0xFF	; 255
 67c:	8f 4f       	sbci	r24, 0xFF	; 255
 67e:	9f 4f       	sbci	r25, 0xFF	; 255
 680:	08 95       	ret

00000682 <__floatunsisf>:
 682:	e8 94       	clt
 684:	09 c0       	rjmp	.+18     	; 0x698 <__floatsisf+0x12>

00000686 <__floatsisf>:
 686:	97 fb       	bst	r25, 7
 688:	3e f4       	brtc	.+14     	; 0x698 <__floatsisf+0x12>
 68a:	90 95       	com	r25
 68c:	80 95       	com	r24
 68e:	70 95       	com	r23
 690:	61 95       	neg	r22
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	8f 4f       	sbci	r24, 0xFF	; 255
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	99 23       	and	r25, r25
 69a:	a9 f0       	breq	.+42     	; 0x6c6 <__floatsisf+0x40>
 69c:	f9 2f       	mov	r31, r25
 69e:	96 e9       	ldi	r25, 0x96	; 150
 6a0:	bb 27       	eor	r27, r27
 6a2:	93 95       	inc	r25
 6a4:	f6 95       	lsr	r31
 6a6:	87 95       	ror	r24
 6a8:	77 95       	ror	r23
 6aa:	67 95       	ror	r22
 6ac:	b7 95       	ror	r27
 6ae:	f1 11       	cpse	r31, r1
 6b0:	f8 cf       	rjmp	.-16     	; 0x6a2 <__floatsisf+0x1c>
 6b2:	fa f4       	brpl	.+62     	; 0x6f2 <__floatsisf+0x6c>
 6b4:	bb 0f       	add	r27, r27
 6b6:	11 f4       	brne	.+4      	; 0x6bc <__floatsisf+0x36>
 6b8:	60 ff       	sbrs	r22, 0
 6ba:	1b c0       	rjmp	.+54     	; 0x6f2 <__floatsisf+0x6c>
 6bc:	6f 5f       	subi	r22, 0xFF	; 255
 6be:	7f 4f       	sbci	r23, 0xFF	; 255
 6c0:	8f 4f       	sbci	r24, 0xFF	; 255
 6c2:	9f 4f       	sbci	r25, 0xFF	; 255
 6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <__floatsisf+0x6c>
 6c6:	88 23       	and	r24, r24
 6c8:	11 f0       	breq	.+4      	; 0x6ce <__floatsisf+0x48>
 6ca:	96 e9       	ldi	r25, 0x96	; 150
 6cc:	11 c0       	rjmp	.+34     	; 0x6f0 <__floatsisf+0x6a>
 6ce:	77 23       	and	r23, r23
 6d0:	21 f0       	breq	.+8      	; 0x6da <__floatsisf+0x54>
 6d2:	9e e8       	ldi	r25, 0x8E	; 142
 6d4:	87 2f       	mov	r24, r23
 6d6:	76 2f       	mov	r23, r22
 6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <__floatsisf+0x5e>
 6da:	66 23       	and	r22, r22
 6dc:	71 f0       	breq	.+28     	; 0x6fa <__floatsisf+0x74>
 6de:	96 e8       	ldi	r25, 0x86	; 134
 6e0:	86 2f       	mov	r24, r22
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	60 e0       	ldi	r22, 0x00	; 0
 6e6:	2a f0       	brmi	.+10     	; 0x6f2 <__floatsisf+0x6c>
 6e8:	9a 95       	dec	r25
 6ea:	66 0f       	add	r22, r22
 6ec:	77 1f       	adc	r23, r23
 6ee:	88 1f       	adc	r24, r24
 6f0:	da f7       	brpl	.-10     	; 0x6e8 <__floatsisf+0x62>
 6f2:	88 0f       	add	r24, r24
 6f4:	96 95       	lsr	r25
 6f6:	87 95       	ror	r24
 6f8:	97 f9       	bld	r25, 7
 6fa:	08 95       	ret

000006fc <__fp_inf>:
 6fc:	97 f9       	bld	r25, 7
 6fe:	9f 67       	ori	r25, 0x7F	; 127
 700:	80 e8       	ldi	r24, 0x80	; 128
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	08 95       	ret

00000708 <__fp_nan>:
 708:	9f ef       	ldi	r25, 0xFF	; 255
 70a:	80 ec       	ldi	r24, 0xC0	; 192
 70c:	08 95       	ret

0000070e <__fp_pscA>:
 70e:	00 24       	eor	r0, r0
 710:	0a 94       	dec	r0
 712:	16 16       	cp	r1, r22
 714:	17 06       	cpc	r1, r23
 716:	18 06       	cpc	r1, r24
 718:	09 06       	cpc	r0, r25
 71a:	08 95       	ret

0000071c <__fp_pscB>:
 71c:	00 24       	eor	r0, r0
 71e:	0a 94       	dec	r0
 720:	12 16       	cp	r1, r18
 722:	13 06       	cpc	r1, r19
 724:	14 06       	cpc	r1, r20
 726:	05 06       	cpc	r0, r21
 728:	08 95       	ret

0000072a <__fp_round>:
 72a:	09 2e       	mov	r0, r25
 72c:	03 94       	inc	r0
 72e:	00 0c       	add	r0, r0
 730:	11 f4       	brne	.+4      	; 0x736 <__fp_round+0xc>
 732:	88 23       	and	r24, r24
 734:	52 f0       	brmi	.+20     	; 0x74a <__fp_round+0x20>
 736:	bb 0f       	add	r27, r27
 738:	40 f4       	brcc	.+16     	; 0x74a <__fp_round+0x20>
 73a:	bf 2b       	or	r27, r31
 73c:	11 f4       	brne	.+4      	; 0x742 <__fp_round+0x18>
 73e:	60 ff       	sbrs	r22, 0
 740:	04 c0       	rjmp	.+8      	; 0x74a <__fp_round+0x20>
 742:	6f 5f       	subi	r22, 0xFF	; 255
 744:	7f 4f       	sbci	r23, 0xFF	; 255
 746:	8f 4f       	sbci	r24, 0xFF	; 255
 748:	9f 4f       	sbci	r25, 0xFF	; 255
 74a:	08 95       	ret

0000074c <__fp_split3>:
 74c:	57 fd       	sbrc	r21, 7
 74e:	90 58       	subi	r25, 0x80	; 128
 750:	44 0f       	add	r20, r20
 752:	55 1f       	adc	r21, r21
 754:	59 f0       	breq	.+22     	; 0x76c <__fp_splitA+0x10>
 756:	5f 3f       	cpi	r21, 0xFF	; 255
 758:	71 f0       	breq	.+28     	; 0x776 <__fp_splitA+0x1a>
 75a:	47 95       	ror	r20

0000075c <__fp_splitA>:
 75c:	88 0f       	add	r24, r24
 75e:	97 fb       	bst	r25, 7
 760:	99 1f       	adc	r25, r25
 762:	61 f0       	breq	.+24     	; 0x77c <__fp_splitA+0x20>
 764:	9f 3f       	cpi	r25, 0xFF	; 255
 766:	79 f0       	breq	.+30     	; 0x786 <__fp_splitA+0x2a>
 768:	87 95       	ror	r24
 76a:	08 95       	ret
 76c:	12 16       	cp	r1, r18
 76e:	13 06       	cpc	r1, r19
 770:	14 06       	cpc	r1, r20
 772:	55 1f       	adc	r21, r21
 774:	f2 cf       	rjmp	.-28     	; 0x75a <__fp_split3+0xe>
 776:	46 95       	lsr	r20
 778:	f1 df       	rcall	.-30     	; 0x75c <__fp_splitA>
 77a:	08 c0       	rjmp	.+16     	; 0x78c <__fp_splitA+0x30>
 77c:	16 16       	cp	r1, r22
 77e:	17 06       	cpc	r1, r23
 780:	18 06       	cpc	r1, r24
 782:	99 1f       	adc	r25, r25
 784:	f1 cf       	rjmp	.-30     	; 0x768 <__fp_splitA+0xc>
 786:	86 95       	lsr	r24
 788:	71 05       	cpc	r23, r1
 78a:	61 05       	cpc	r22, r1
 78c:	08 94       	sec
 78e:	08 95       	ret

00000790 <__fp_zero>:
 790:	e8 94       	clt

00000792 <__fp_szero>:
 792:	bb 27       	eor	r27, r27
 794:	66 27       	eor	r22, r22
 796:	77 27       	eor	r23, r23
 798:	cb 01       	movw	r24, r22
 79a:	97 f9       	bld	r25, 7
 79c:	08 95       	ret
 79e:	16 f0       	brts	.+4      	; 0x7a4 <__fp_szero+0x12>
 7a0:	0c 94 8c 04 	jmp	0x918	; 0x918 <__fp_mpack>
 7a4:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_nan>
 7a8:	68 94       	set
 7aa:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__fp_inf>

000007ae <log>:
 7ae:	0e 94 ae 03 	call	0x75c	; 0x75c <__fp_splitA>
 7b2:	a8 f3       	brcs	.-22     	; 0x79e <__fp_szero+0xc>
 7b4:	99 23       	and	r25, r25
 7b6:	c1 f3       	breq	.-16     	; 0x7a8 <__fp_szero+0x16>
 7b8:	ae f3       	brts	.-22     	; 0x7a4 <__fp_szero+0x12>
 7ba:	df 93       	push	r29
 7bc:	cf 93       	push	r28
 7be:	1f 93       	push	r17
 7c0:	0f 93       	push	r16
 7c2:	ff 92       	push	r15
 7c4:	c9 2f       	mov	r28, r25
 7c6:	dd 27       	eor	r29, r29
 7c8:	88 23       	and	r24, r24
 7ca:	2a f0       	brmi	.+10     	; 0x7d6 <log+0x28>
 7cc:	21 97       	sbiw	r28, 0x01	; 1
 7ce:	66 0f       	add	r22, r22
 7d0:	77 1f       	adc	r23, r23
 7d2:	88 1f       	adc	r24, r24
 7d4:	da f7       	brpl	.-10     	; 0x7cc <log+0x1e>
 7d6:	20 e0       	ldi	r18, 0x00	; 0
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	40 e8       	ldi	r20, 0x80	; 128
 7dc:	5f eb       	ldi	r21, 0xBF	; 191
 7de:	9f e3       	ldi	r25, 0x3F	; 63
 7e0:	88 39       	cpi	r24, 0x98	; 152
 7e2:	20 f0       	brcs	.+8      	; 0x7ec <log+0x3e>
 7e4:	80 3e       	cpi	r24, 0xE0	; 224
 7e6:	38 f0       	brcs	.+14     	; 0x7f6 <log+0x48>
 7e8:	21 96       	adiw	r28, 0x01	; 1
 7ea:	8f 77       	andi	r24, 0x7F	; 127
 7ec:	0e 94 34 02 	call	0x468	; 0x468 <__addsf3>
 7f0:	e8 e6       	ldi	r30, 0x68	; 104
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	04 c0       	rjmp	.+8      	; 0x7fe <log+0x50>
 7f6:	0e 94 34 02 	call	0x468	; 0x468 <__addsf3>
 7fa:	e5 e9       	ldi	r30, 0x95	; 149
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	0e 94 9a 04 	call	0x934	; 0x934 <__fp_powser>
 802:	8b 01       	movw	r16, r22
 804:	be 01       	movw	r22, r28
 806:	ec 01       	movw	r28, r24
 808:	fb 2e       	mov	r15, r27
 80a:	6f 57       	subi	r22, 0x7F	; 127
 80c:	71 09       	sbc	r23, r1
 80e:	75 95       	asr	r23
 810:	77 1f       	adc	r23, r23
 812:	88 0b       	sbc	r24, r24
 814:	99 0b       	sbc	r25, r25
 816:	0e 94 43 03 	call	0x686	; 0x686 <__floatsisf>
 81a:	28 e1       	ldi	r18, 0x18	; 24
 81c:	32 e7       	ldi	r19, 0x72	; 114
 81e:	41 e3       	ldi	r20, 0x31	; 49
 820:	5f e3       	ldi	r21, 0x3F	; 63
 822:	0e 94 32 04 	call	0x864	; 0x864 <__mulsf3x>
 826:	af 2d       	mov	r26, r15
 828:	98 01       	movw	r18, r16
 82a:	ae 01       	movw	r20, r28
 82c:	ff 90       	pop	r15
 82e:	0f 91       	pop	r16
 830:	1f 91       	pop	r17
 832:	cf 91       	pop	r28
 834:	df 91       	pop	r29
 836:	0e 94 4b 02 	call	0x496	; 0x496 <__addsf3x>
 83a:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_round>

0000083e <__mulsf3>:
 83e:	0e 94 32 04 	call	0x864	; 0x864 <__mulsf3x>
 842:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_round>
 846:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_pscA>
 84a:	38 f0       	brcs	.+14     	; 0x85a <__mulsf3+0x1c>
 84c:	0e 94 8e 03 	call	0x71c	; 0x71c <__fp_pscB>
 850:	20 f0       	brcs	.+8      	; 0x85a <__mulsf3+0x1c>
 852:	95 23       	and	r25, r21
 854:	11 f0       	breq	.+4      	; 0x85a <__mulsf3+0x1c>
 856:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__fp_inf>
 85a:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_nan>
 85e:	11 24       	eor	r1, r1
 860:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_szero>

00000864 <__mulsf3x>:
 864:	0e 94 a6 03 	call	0x74c	; 0x74c <__fp_split3>
 868:	70 f3       	brcs	.-36     	; 0x846 <__mulsf3+0x8>

0000086a <__mulsf3_pse>:
 86a:	95 9f       	mul	r25, r21
 86c:	c1 f3       	breq	.-16     	; 0x85e <__mulsf3+0x20>
 86e:	95 0f       	add	r25, r21
 870:	50 e0       	ldi	r21, 0x00	; 0
 872:	55 1f       	adc	r21, r21
 874:	62 9f       	mul	r22, r18
 876:	f0 01       	movw	r30, r0
 878:	72 9f       	mul	r23, r18
 87a:	bb 27       	eor	r27, r27
 87c:	f0 0d       	add	r31, r0
 87e:	b1 1d       	adc	r27, r1
 880:	63 9f       	mul	r22, r19
 882:	aa 27       	eor	r26, r26
 884:	f0 0d       	add	r31, r0
 886:	b1 1d       	adc	r27, r1
 888:	aa 1f       	adc	r26, r26
 88a:	64 9f       	mul	r22, r20
 88c:	66 27       	eor	r22, r22
 88e:	b0 0d       	add	r27, r0
 890:	a1 1d       	adc	r26, r1
 892:	66 1f       	adc	r22, r22
 894:	82 9f       	mul	r24, r18
 896:	22 27       	eor	r18, r18
 898:	b0 0d       	add	r27, r0
 89a:	a1 1d       	adc	r26, r1
 89c:	62 1f       	adc	r22, r18
 89e:	73 9f       	mul	r23, r19
 8a0:	b0 0d       	add	r27, r0
 8a2:	a1 1d       	adc	r26, r1
 8a4:	62 1f       	adc	r22, r18
 8a6:	83 9f       	mul	r24, r19
 8a8:	a0 0d       	add	r26, r0
 8aa:	61 1d       	adc	r22, r1
 8ac:	22 1f       	adc	r18, r18
 8ae:	74 9f       	mul	r23, r20
 8b0:	33 27       	eor	r19, r19
 8b2:	a0 0d       	add	r26, r0
 8b4:	61 1d       	adc	r22, r1
 8b6:	23 1f       	adc	r18, r19
 8b8:	84 9f       	mul	r24, r20
 8ba:	60 0d       	add	r22, r0
 8bc:	21 1d       	adc	r18, r1
 8be:	82 2f       	mov	r24, r18
 8c0:	76 2f       	mov	r23, r22
 8c2:	6a 2f       	mov	r22, r26
 8c4:	11 24       	eor	r1, r1
 8c6:	9f 57       	subi	r25, 0x7F	; 127
 8c8:	50 40       	sbci	r21, 0x00	; 0
 8ca:	9a f0       	brmi	.+38     	; 0x8f2 <__mulsf3_pse+0x88>
 8cc:	f1 f0       	breq	.+60     	; 0x90a <__stack+0xb>
 8ce:	88 23       	and	r24, r24
 8d0:	4a f0       	brmi	.+18     	; 0x8e4 <__mulsf3_pse+0x7a>
 8d2:	ee 0f       	add	r30, r30
 8d4:	ff 1f       	adc	r31, r31
 8d6:	bb 1f       	adc	r27, r27
 8d8:	66 1f       	adc	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	91 50       	subi	r25, 0x01	; 1
 8e0:	50 40       	sbci	r21, 0x00	; 0
 8e2:	a9 f7       	brne	.-22     	; 0x8ce <__mulsf3_pse+0x64>
 8e4:	9e 3f       	cpi	r25, 0xFE	; 254
 8e6:	51 05       	cpc	r21, r1
 8e8:	80 f0       	brcs	.+32     	; 0x90a <__stack+0xb>
 8ea:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__fp_inf>
 8ee:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_szero>
 8f2:	5f 3f       	cpi	r21, 0xFF	; 255
 8f4:	e4 f3       	brlt	.-8      	; 0x8ee <__mulsf3_pse+0x84>
 8f6:	98 3e       	cpi	r25, 0xE8	; 232
 8f8:	d4 f3       	brlt	.-12     	; 0x8ee <__mulsf3_pse+0x84>
 8fa:	86 95       	lsr	r24
 8fc:	77 95       	ror	r23
 8fe:	67 95       	ror	r22
 900:	b7 95       	ror	r27
 902:	f7 95       	ror	r31
 904:	e7 95       	ror	r30
 906:	9f 5f       	subi	r25, 0xFF	; 255
 908:	c1 f7       	brne	.-16     	; 0x8fa <__mulsf3_pse+0x90>
 90a:	fe 2b       	or	r31, r30
 90c:	88 0f       	add	r24, r24
 90e:	91 1d       	adc	r25, r1
 910:	96 95       	lsr	r25
 912:	87 95       	ror	r24
 914:	97 f9       	bld	r25, 7
 916:	08 95       	ret

00000918 <__fp_mpack>:
 918:	9f 3f       	cpi	r25, 0xFF	; 255
 91a:	31 f0       	breq	.+12     	; 0x928 <__fp_mpack_finite+0xc>

0000091c <__fp_mpack_finite>:
 91c:	91 50       	subi	r25, 0x01	; 1
 91e:	20 f4       	brcc	.+8      	; 0x928 <__fp_mpack_finite+0xc>
 920:	87 95       	ror	r24
 922:	77 95       	ror	r23
 924:	67 95       	ror	r22
 926:	b7 95       	ror	r27
 928:	88 0f       	add	r24, r24
 92a:	91 1d       	adc	r25, r1
 92c:	96 95       	lsr	r25
 92e:	87 95       	ror	r24
 930:	97 f9       	bld	r25, 7
 932:	08 95       	ret

00000934 <__fp_powser>:
 934:	df 93       	push	r29
 936:	cf 93       	push	r28
 938:	1f 93       	push	r17
 93a:	0f 93       	push	r16
 93c:	ff 92       	push	r15
 93e:	ef 92       	push	r14
 940:	df 92       	push	r13
 942:	7b 01       	movw	r14, r22
 944:	8c 01       	movw	r16, r24
 946:	68 94       	set
 948:	06 c0       	rjmp	.+12     	; 0x956 <__fp_powser+0x22>
 94a:	da 2e       	mov	r13, r26
 94c:	ef 01       	movw	r28, r30
 94e:	0e 94 32 04 	call	0x864	; 0x864 <__mulsf3x>
 952:	fe 01       	movw	r30, r28
 954:	e8 94       	clt
 956:	a5 91       	lpm	r26, Z+
 958:	25 91       	lpm	r18, Z+
 95a:	35 91       	lpm	r19, Z+
 95c:	45 91       	lpm	r20, Z+
 95e:	55 91       	lpm	r21, Z+
 960:	a6 f3       	brts	.-24     	; 0x94a <__fp_powser+0x16>
 962:	ef 01       	movw	r28, r30
 964:	0e 94 4b 02 	call	0x496	; 0x496 <__addsf3x>
 968:	fe 01       	movw	r30, r28
 96a:	97 01       	movw	r18, r14
 96c:	a8 01       	movw	r20, r16
 96e:	da 94       	dec	r13
 970:	69 f7       	brne	.-38     	; 0x94c <__fp_powser+0x18>
 972:	df 90       	pop	r13
 974:	ef 90       	pop	r14
 976:	ff 90       	pop	r15
 978:	0f 91       	pop	r16
 97a:	1f 91       	pop	r17
 97c:	cf 91       	pop	r28
 97e:	df 91       	pop	r29
 980:	08 95       	ret

00000982 <__umulhisi3>:
 982:	a2 9f       	mul	r26, r18
 984:	b0 01       	movw	r22, r0
 986:	b3 9f       	mul	r27, r19
 988:	c0 01       	movw	r24, r0
 98a:	a3 9f       	mul	r26, r19
 98c:	70 0d       	add	r23, r0
 98e:	81 1d       	adc	r24, r1
 990:	11 24       	eor	r1, r1
 992:	91 1d       	adc	r25, r1
 994:	b2 9f       	mul	r27, r18
 996:	70 0d       	add	r23, r0
 998:	81 1d       	adc	r24, r1
 99a:	11 24       	eor	r1, r1
 99c:	91 1d       	adc	r25, r1
 99e:	08 95       	ret

000009a0 <_exit>:
 9a0:	f8 94       	cli

000009a2 <__stop_program>:
 9a2:	ff cf       	rjmp	.-2      	; 0x9a2 <__stop_program>
