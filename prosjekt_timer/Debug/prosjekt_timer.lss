
prosjekt_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b3  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c1  00000000  00000000  000009a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000303  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c7  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e3  00000000  00000000  0000178f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001872  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Buzzer>:
		  if (bit_is_clear(PIND, PD2)) {            /* look for button press */
			  /* equivalent to if ((PIND & (1 << PD2)) == 0 ){ */
				  PORTB = 0b00111100;                                   /* pressed */
			  }
			  else {                                              /* not pressed */
				  PORTB = 0b11000011;
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	84 b9       	out	0x04, r24	; 4
  84:	80 e4       	ldi	r24, 0x40	; 64
  86:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  8a:	8d e0       	ldi	r24, 0x0D	; 13
  8c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  90:	8d e0       	ldi	r24, 0x0D	; 13
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  98:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  9c:	08 95       	ret

0000009e <Stop>:
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	c3 e0       	ldi	r28, 0x03	; 3
  a4:	d0 e0       	ldi	r29, 0x00	; 0
  a6:	16 c0       	rjmp	.+44     	; 0xd4 <Stop+0x36>
  a8:	0e 94 40 00 	call	0x80	; 0x80 <Buzzer>
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	83 ed       	ldi	r24, 0xD3	; 211
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <Stop+0x14>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <Stop+0x1e>
  bc:	00 00       	nop
  be:	14 b8       	out	0x04, r1	; 4
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	89 e6       	ldi	r24, 0x69	; 105
  c4:	98 e1       	ldi	r25, 0x18	; 24
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <Stop+0x28>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <Stop+0x32>
  d0:	00 00       	nop
  d2:	21 97       	sbiw	r28, 0x01	; 1
  d4:	1c 16       	cp	r1, r28
  d6:	1d 06       	cpc	r1, r29
  d8:	3c f3       	brlt	.-50     	; 0xa8 <Stop+0xa>
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <main>:



int main(void)
{
	DDRB = (1<<DDB0);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB0);
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	85 b9       	out	0x05, r24	; 5
	Stop();
  ea:	0e 94 4f 00 	call	0x9e	; 0x9e <Stop>
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0xe>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
