
prosjekt_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b3  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c1  00000000  00000000  0000099f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000303  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001364  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c7  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e3  00000000  00000000  0000178b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000186e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  78:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Buzzer>:
		  if (bit_is_clear(PIND, PD2)) {            /* look for button press */
			  /* equivalent to if ((PIND & (1 << PD2)) == 0 ){ */
				  PORTB = 0b00111100;                                   /* pressed */
			  }
			  else {                                              /* not pressed */
				  PORTB = 0b11000011;
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	84 b9       	out	0x04, r24	; 4
  84:	82 e4       	ldi	r24, 0x42	; 66
  86:	84 bd       	out	0x24, r24	; 36
  88:	85 e0       	ldi	r24, 0x05	; 5
  8a:	85 bd       	out	0x25, r24	; 37
  8c:	8d e0       	ldi	r24, 0x0D	; 13
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  94:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  98:	08 95       	ret

0000009a <Stop>:
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	c3 e0       	ldi	r28, 0x03	; 3
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	16 c0       	rjmp	.+44     	; 0xd0 <Stop+0x36>
  a4:	0e 94 40 00 	call	0x80	; 0x80 <Buzzer>
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	83 ed       	ldi	r24, 0xD3	; 211
  ac:	90 e3       	ldi	r25, 0x30	; 48
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <Stop+0x14>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <Stop+0x1e>
  b8:	00 00       	nop
  ba:	14 b8       	out	0x04, r1	; 4
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	89 e6       	ldi	r24, 0x69	; 105
  c0:	98 e1       	ldi	r25, 0x18	; 24
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <Stop+0x28>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <Stop+0x32>
  cc:	00 00       	nop
  ce:	21 97       	sbiw	r28, 0x01	; 1
  d0:	1c 16       	cp	r1, r28
  d2:	1d 06       	cpc	r1, r29
  d4:	3c f3       	brlt	.-50     	; 0xa4 <Stop+0xa>
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <main>:



int main(void)
{
	DDRB = (1<<DDB0);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB0);
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	85 b9       	out	0x05, r24	; 5
	Stop();
  e6:	0e 94 4d 00 	call	0x9a	; 0x9a <Stop>
  ea:	ff cf       	rjmp	.-2      	; 0xea <main+0xe>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
